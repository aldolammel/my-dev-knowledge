

    DJANGO > PLANNED ERROR MESSAGES: BASIC


        >> Django default error messages (for forms.py and models.py fields):
        
            If a Model-class has no 'blank=True' or has declared 'blank=False', Django will automatically set as REQUIRED field not just in db level but also in CMS form field, including the error message 'This field is required'.


        >> Model argument 'error_messages={}' (server-side checking):

            It's the most reliable and solid way to ensure that anything that causes an infraction 
            for a given attribute will generate the planned error message. However, this method is 
            server-side, that is, it's handled by the server and not by the client machine.

                <example here> xxxxxxxxxxxxxxxx


        >> Error messages on front-end (client-side checking):

            It's a great way to validate fields without consuming server resources.

                >> Using Django Model built-in validators to create front-end validations:
                    /Python/Web-development/django/6-validators/models-builtin-validators.txt

                >> Using custom Django validators to create front-end validations:
                    /Python/Web-development/django/6-validators/models-custom-validator.py

                >> Error messages manage by FRONT-END solutions:

                    >> Using Django Template as front-end solution:
                        /Python/Web-development/django/3-3-frontend-templates/form-error-messages.html

                    >> Using Vue:
                        /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

                    >> Using React:
                        /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

                    >> Using Angular:
                        /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
