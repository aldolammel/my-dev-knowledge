

REGISTERING: CUSTOMIZING THE FRONT-END FORM


    0) Very basic to use Django built-in user features:

        /33-Web-development/backend/python/django/3-1-backend-models-database/3-users/extending-users-basic.txt


    1) Create or open the forms.py file in 'accounts' sub-app:

        from django import forms
        from django.contrib.auth.forms import UserCreationForm
        from django.contrib.auth.models import User
        from .models import UserProfile


        class CustomUserCreationForm(UserCreationForm):
            """
            Only the additional fields to be shown in the original Django Registering page on front-end.
            """

            # Adding additional fields not originally present in the built-in User class:
            # signals.py: these fields are declared in the signals.py too! If updated, check that out!
            profile_type = forms.ChoiceField(
                widget=forms.RadioSelect,
                label=LB_PROFILE_TYPE,
                choices=choices=(('1', 'Example A'), ('2', 'Example B')),,
            )
            sex = forms.ChoiceField(
                widget=forms.RadioSelect,
                label=LB_SEX,
                choices=(('f', 'Female'), ('m', 'Male'), ('i', 'Intersex')),
            )

            class Meta:
                model = User
                # Specify the fields to include in the form, in the order you want:
                fields = [
                    'profile_type',  # additional field!
                    'sex',  # additional field!
                    'username',
                    'email',
                    'password1',
                    'password2',
                ]

            def save(self, commit=True):
                # Save the user instance first:
                user = super().save(commit=False)
                # Store the additional fields data in the instance temporarily:
                user._profile_data = {
                    'profile_type': self.cleaned_data['profile_type'],
                    'sex': self.cleaned_data['sex'],
                }
                #
                if commit:
                    user.save()
                #
                return user


        class UserProfileForm(forms.ModelForm):
            """
            Form of the user profile itself to be shown on the front-end.
            """

            # Including these fields from User model:
            first_name = forms.CharField(max_length=15)
            last_name = forms.CharField(max_length=20)
            email = forms.EmailField()

            class Meta:
                # Connecting the form with the model/table it will populate:
                model = UserProfile
                # Defining which model class (from models.py) fields will be associated to this form:
                fields = [
                    # 'user',
                    # 'profile_type',
                    'first_name',
                    'last_name',
                    'email',
                    'sex',
                ]

            # Django built-in initialization method:
            def __init__(self, *args, **kwargs):
                # Pass the User instance to the form via kwargs:
                user = kwargs.pop('user', None)
                super().__init__(*args, **kwargs)
                # User exists:
                if user:
                    # Pre-populate the fields with User data:
                    self.fields['first_name'].initial = user.first_name
                    self.fields['last_name'].initial = user.last_name
                    self.fields['email'].initial = user.email

                # These fields MUST be required:
                # self.fields['user'].required = True
                # self.fields['profile_type'].required = True
                self.fields['email'].required = True

                # These fields must NOT be required:
                self.fields['first_name'].required = False
                self.fields['last_name'].required = False
                self.fields['sex'].required = False

            # Django built-in save method:
            def save(self, commit=True):
                # Save the UserProfile instance:
                profile = super().save(commit=False)
                # Update the related User instance with first_name, last_name, and email:
                user = profile.user
                user.first_name = self.cleaned_data['first_name']
                user.last_name = self.cleaned_data['last_name']
                user.email = self.cleaned_data['email']
                #
                if commit:
                    user.save()  # Save User instance
                    profile.save()  # Save UserProfile instance
                return profile



    2) Create the signal to create the UserProfile automatically when a new user is
        created in Django:

        /33-Web-development/backend/python/django/7-middlewares-and-signals/signals/signals-user-expansion.txt



    3) html's for register and profile forms:

            /33-Web-development/backend/python/django/9-forms/frontend-user-register-form.txt
            /33-Web-development/backend/python/django/9-forms/frontend-user-profile-form.txt


    4) views.py in account sub-app too:

        from django.contrib.auth.models import User
        from django.contrib.auth.decorators import login_required
        from django.contrib.auth import login
        from django.shortcuts import render, redirect, get_object_or_404
        from .models import UserProfile
        from .forms import CustomUserCreationForm, UserProfileForm

        # CONSTANTS:
        BT_UPDATE = 'Update'
        BT_DEL_ACCOUNT = 'Delete account'

        def register(request):
            # If the user is already authenticated:
            if request.user.is_authenticated:
                return redirect('in:home_view')
            # Otherwise, if not authenticated:
            else:
                if request.method == 'POST':
                    form = CustomUserCreationForm(request.POST)
                    if form.is_valid():
                        new_user = form.save()
                        # Log the user in after successful registration (optional):
                        login(request, new_user)
                        return redirect('in:home_view')
                else:
                    form = CustomUserCreationForm()  # built-in class.
                #
                context = {'form': form}
                return render(request, 'registration/register.html', context)


        @login_required
        def user_profile(request, username):
            # Fetch the UserProfile by the User's username:
            user = get_object_or_404(User, username=username)
            instance = get_object_or_404(UserProfile, user=user)

            if request.user != instance.user:
                return render(request, 'general/401.html')

            if request.method == 'POST':
                if 'del_account' in request.POST:
                    # FIX: DELETION OPTIONS IS NEEDED IN FRONT-END?
                    # instance.delete_instance()
                    return redirect('general:home_view')
                # Defining the object of the current form, passing also the user object:
                form = UserProfileForm(request.POST, instance=instance, user=request.user)
                if form.is_valid():
                    instance = form.save()
                    # Redirect using username instead of pk:
                    return redirect('accounts:profile_view', username=user.username)
            # When the form doesn't change any, just populate it with existing data (GET method):
            else:
                form = UserProfileForm(instance=instance, user=request.user)

            # Defining what will be sent to the front-end/template:
            context = {
                'form': form,
                'bt_submit': BT_UPDATE,
                'bt_del': BT_DEL_ACCOUNT,
            }
            # Load the template:
            return render(request, 'accounts/profile.html', context)




    5) urls.py:

        from django.urls import path, include
        from . import views

        # Namespace:
        app_name = 'accounts'

        urlpatterns = [
            # http://127.0.0.1:8000/accounts/register/
            path('register/', views.register, name='register_view'),
            # http://127.0.0.1:8000/accounts/aldolammel
            path('<str:username>', views.user_profile, name='profile_view'),
            # http://127.0.0.1:8000/accounts
            # I'm saying that all user accounts must be handle by django that automatically includes
            # pattern-names as 'login' and 'logout':
            path('', include('django.contrib.auth.urls')),
        ]





    6) settings.py in your config-folder:

        LOGIN_REDIRECT_URL = '<subapp_namespace>:<desired_page_view>'  # Where to redirect after login
        LOGOUT_REDIRECT_URL = '<subapp_namespace>:<desired_page_view>'  # Where to redirect after logout



    7) How to add these custom fields in the CMS User Register too:

        SOON