

EXTENDING THE USER FEATURES:
If your project needs to show User Profile on the application front-end, or even a simple user creation form also on the application front-end, you must use these settings!


    >> But for VERY BASIC user solution, use Django built-in user features:
        /Python/Web-development/django/3-1-backend-models-database/3-users/1-basic-users-only-for-cms.txt


    1) Create a sub-app called 'accounts' and add it in the core-folder settings.py
        file as 'accounts' in 'Installed Apps' list;
    
    2) Create Custom User Model (Extending the original one):

        >> The built-in class 'User' is a child of AbstractUser class where all original fields are;  
        
        >> Create your custom User class:

            >> Highly recommended to set in here: /accounts/models.py

                from django.contrib.auth.models import AbstractUser, BaseUserManager
                from django.db import models

                class CustomUserManager(BaseUserManager):
                    '''Built-in class to customize the superuser creation.'''
                    
                    # This method is mandatory, but no changes were made:
                    def create_user(self, email, password=None, **extra_fields):
                        '''Create and return a user with an email and password.'''
                        if not email:
                            raise ValueError('The Email field must be set')
                        email = self.normalize_email(email)
                        user = self.model(email=email, **extra_fields)
                        user.set_password(password)
                        user.save()
                        return user
                    
                    # Superuser creation customization:
                    def create_superuser(self, email, password=None, **extra_fields):
                        '''Create and return a superuser with the given email and password.'''
                        extra_fields.setdefault('is_staff', True)
                        extra_fields.setdefault('is_superuser', True)
                        extra_fields.setdefault("is_active", True)
                        # Set the custom fields as True:
                        extra_fields.setdefault('accepted_our_privacy', True)
                        # Call the existing create_user method from BaseUserManager:
                        return self.create_user(email, password, **extra_fields)

                class User(AbstractUser):
                    # Overriding the original fields just to custom them (as translating, for example):
                    first_name = models.CharField(
                        max_length=150,
                        blank=True,
                    )
                    last_name = models.CharField(
                        max_length=150,
                        blank=True,
                    )
                    email = models.EmailField(
                        blank=True,
                    )
                    # Above, those original fields (from AbstractUser) that are not overriden, they'll be working normally!
                    # Below, new fields to extending the User features:
                    accepted_our_privacy = models.BooleanField(
                        default=False,
                        verbose_name=...,
                        help_text=...,
                        # error_messages in validators.py
                    )
                    # created_at = 'date_joined' from AbstractUser

                    # Model Managers:
                    # Reserved space...
                    
                    objects = CustomUserManager()  # needed coz additional fields of superuser creation by terminal.

                    class Meta:
                        db_table = 'auth_user'  # I like to keep the original name!
                        ordering = ['username']
                        verbose_name = 'User'
                        verbose_name_plural = 'Users'
                    
                    def __str__(self):
                        return self.username

                    def clean(self):
                        '''It's a built-in method for adding custom validation logic before saving data to the db.'''
                        validate_user_agreement(self)


            >> Create the /accounts/validators.py file:

                def validate_user_agreement(instance):
                '''Server-side validation for user's acceptance of the minimum age and privacy policy.'''
                    if not instance.accepted_our_privacy:
                        raise ValidationError('To use our services, you must read and accept our Privacy Policy.', code='invalid_choice')


    3) In settings.py, say Django needs to look for users in the new extended class:

        # App Essential Settings:
        ...
        AUTH_USER_MODEL = 'accounts.User'  # '<my_subapp>.<user_model_class>'



    4) Run makemigrations and migrate!



    5) /accounts/forms.py:

        from django.contrib.auth.forms import UserCreationForm
        from .models import User


        class CustomUserCreationForm(UserCreationForm):
            '''Customizing the Django User Registration form for front-end.'''

            class Meta:
                # Connected model to populate:
                model = User
                # Ordering fields on the form:
                fields = [
                    'username',
                    'email',
                    'password1',
                    'password2',
                    'accepted_our_privacy',
                ]

            # Extra fields:
            # Important: signals.py: should the extra fields be declared over there? Check it!
            # Reserved space...

        >> Check this out too:
            /Python/Web-development/django/10-login-and-logout/0-registering-by-frontend.txt


    6) Customizing the CMS User list-view and detail-view:

        from django.contrib.auth.admin import UserAdmin
        from .forms import CustomUserCreationForm
        from .models import User


        @admin.register(User)
        class UserCMS(UserAdmin):
            '''Defining how the User Model class will exclusivily be shown on the CMS.'''

            # Specify the custom form for creating users
            add_form = CustomUserCreationForm

            list_display = (
                'username',
                'email',
                'last_login',
                'is_staff',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            )
            # All fields exclusivily for the CMS Adding New object:
            add_fieldsets = (
                (None, {
                    # "classes": ("wide",),
                    "fields": (
                        "profile_type",
                        "username",
                        "email",
                        "password1",
                        "password2",
                        "accepted_min_age",
                        "accepted_our_privacy",
                    )},
                ),
            )
            # All fields exclusivily for the CMS Visualizing an object:
            fieldsets = (
                (None, {
                    # "classes": ("wide",),
                    "fields": (
                        "username",
                        "password",
                        "profile_type",
                        "profile_link",  # Adding the UserProfile link in the User Detail-view!
                        "accepted_min_age",
                        "accepted_our_privacy",
                    )},
                ),
                ("Personal info", {
                    # "classes": ("wide",),
                    "fields": (
                        "email",
                        "language",
                    )},
                ),
                ("Permissions", {
                    # "classes": ("wide",),
                    "fields": (
                        "is_active",
                        "is_notified_by_email",
                        "is_staff",
                        "is_superuser",
                        "groups",
                        "user_permissions",
                    )},
                ),
                ("Important dates", {
                    # "classes": ("wide",),
                    "fields": (
                        "date_joined",
                        "last_login",
                        "last_pwd_update",
                        "updated_at",
                        "updated_by",
                    )},
                ),
            )
            list_filter = (
                'is_active',
                'is_staff',
                'is_superuser',
                # List_filter only accepts imported fields using prefix:
                # Reserved space...
            )
            search_fields = [
                'username',
                'email',
                'date_joined',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            ]
            readonly_fields = (
                # 'username',  # Dynamicaly included!
                # 'accepted_our_privacy',  # Dynamicaly included!
                'date_joined',
                'last_login',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                # Reserved space...
            )

            # Use this in case error trying to include or editing the object:
            """def get_fieldsets(self, request, obj=None):
                if not obj:  # Adding a new object
                    return self.add_fieldsets
                return self.fieldsets  # Editing an existing object"""
            
            def get_readonly_fields(self, request, obj=None):
                '''Built-in method to extend the 'readonly_fields' power.'''
                if obj:
                    # If the user exists (obj), make some fields field read-only on detail-view,
                    # but still editable on the CMS Add User form:
                    return self.readonly_fields + (
                        'username',
                        'accepted_our_privacy',
                    )  # type: ignore
                return self.readonly_fields

            def save_model(self, request, obj, form, change):
                '''It's a key part of Django's admin customization that allows you to control what happens
                when a model instance (models.py) is created/updated through the CMS.'''
                # Sending to models.py the current user in CMS:
                obj.save(user=request.user)
                
                
                
        # Registering Django CMS customizations:
        # Reserved space...
        # Registering App CMS features:
        # Reserved space...


    X) Test it!

    
    >> USER PROFILE PAGE:

        /Python/Web-development/django/3-1-backend-models-database/3-users/3-extending-users-with-profile.txt

