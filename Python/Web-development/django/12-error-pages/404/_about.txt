

ERROR 404 INFORMATION: 


    >> When Debug mode is False, Django looks automatically for the 404.html
        file in the project global 'templates' folder, making unnecessary to set it in urls.py files.


    >> Since DEBUG=False, Django relies on the web server to serve static files, and you must
        ensure all static files (including admin CSS) are collected into the STATIC_ROOT 
        directory by running:

            # This command is not needed if DEBUG=True:
            $ python manage.py collectstatic
            or
            $ uv run manage.py collectstatic

            It'll create the 'staticfiles' folder in the project folder.


    >> Debug Mode can be customized through Django core-folder file called 'settings.py' or
        in '.env' file. More about in:

            /31-Environment-Variables/


    >> If you need to call 404 error in a view, use:
        (Considering the html file is in the 'root/templates' folder)
        
        
        >> In a Based-Class View:
            
            from django.shortcuts import render
            
            return render(self.request, '404.html', status=404)

            >> Important: if your class-view is inherit DetailView, it will automatically
                            render a 404 error, so this code is not needed. In this cases,
                            make sure your get_queryset() method is returning just what you need:

                                E.g.:
                                    def get_queryset(self):
                                        return Page.objects.filter(is_published=True)

                                Otherwise, e.g.:

                                    def get_object(self, queryset=None):
                                        obj = super().get_object(queryset=queryset)
                                        if not obj.is_published:
                                            return render(self.request, '404.html', status=404)
                                        return obj


        >> In a Function-Based View:

            from django.shortcuts import render
            
            def my_function_view(request):
                ...
                return render(request, '404.html', status=404)