

DJANGO FORMS VALIDATIONS > APP-LEVEL/CMS-LEVEL: HOW TO APPLY CLEAN() METHOD FOR MODELS AND FORMS


        clean() is a built-in method that's used in forms and models for cross-field validations or other complex uses. When exactly the clean() method is executaded is different between models and forms cases:

            MODELS CLEAN() METHOD:
                It's used to provide custom model-level validation logic, and is called by full_clean() before saving the object.

            FORMS CLEAN() METHOD:
                On a form, it provides custom validation logic that runs after field-level validation but before cleaned data is returned.


        BASIC KNOWLEDGE:
            ./validation-2-for-app-forms.txt
            /Python/Web-development/django/9-forms/error-messages/basic.txt


        IMPORTANT:
            All clean() validations written through 'models.py' will automatically propagate on CMS, not mandatorially demanding to add clean() in forms.py (once it's NOT ALLOWED to set clean() method directly in admin.py files). This logic you can read more:
                ./validation-3-for-CMS-forms.txt


        DIFFERENCES BETWEEN CLEAN() FOR MODELS.PY AND FORMS.PY:

            
            >> For MODEL classes:

                    class ExampleModel(model.Model):
                        ...

                        def clean(self):
                            """Built-in Model method used to provide custom model-level validation logic, and is called by full_clean() before save() the instance."""
                            # Access model fields data directly:
                            p = self.goal_primary
                            s = self.goal_secondary

                            # Some validator function in validators.py:
                            my_custom_validator(p, s)


            >> For FORM classes:

                    class ExampleModelForm(forms.ModelForm):
                        
                        class Meta:
                            model = ExampleModel
                            fields = "__all__"

                        def clean(self):
                            """Built-in Form method used to provide custom validation logic after field-level validation, but before the cleaned data's return."""
                            # Always starts like this:
                            cleaned_data = super().clean()

                            # Something to make it useful:
                            p = cleaned_data.get('goal_primary')
                            s = cleaned_data.get('goal_secondary')
                            my_custom_validator(p, s)

                            # And ends, returning that dictionary:
                            return cleaned_data



        >> HOW TO BUILD A VALIDATORS.PY:
            /Python/Web-development/django/6-validations/models-validators-customized.py

