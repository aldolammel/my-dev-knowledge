

DJANGO FORMS VALIDATIONS: FOR APP LEVEL (FINAL USER'S FRONT-END)


    There are 2 main places where you put validation logic:

    1. Field-level validation (using "validators" functions);
    2. Model-level validation (using a "clean()" method);

    That said, keep in mind:


    1. FIELD-LEVEL - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    - You use validators as argument of model fields or form fields;
    - You can use built-in validators or customized ones;
    - Validators run when the full_clean() is called automatically on the model or form;
    - Validators NEVER validate in database-level;
    - Validators impact also in Django CMS forms (admin);
    - Good for rules tied to a single field (format, value range, forbidden chars, etc).

        E.g.
            # models.py (similar for forms.py):
            django.core.validators
            class Product(models.Model):
                ...
                stock = models.PositiveIntegerField(
                    validators=[
                        MinValueValidator(0),
                    ]
                )


        >> Be aware:
            If you bypass forms usage (e.g., calling Product.objects.create() directly), validators WON'T run automatically.
        
        
        >> Built-in options:
            ./models-validators-built-in.txt



    2. MODEL-LEVEL - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    - You use clean() method as a method of a model class or form class;
    - You can use clean() only for customized validations;
    - clean() runs when the full_clean() is called automatically on the model or form;
    - clean() method NEVER validates in database-level;
    - clean() impacts also in Django CMS forms (admin) because they use ModelForms;
    - Good for complex or cross-field validations for consistency between fields.
    
        E.g.
            # models.py (similar for forms.py):
            class Product(models.Model):
                ...
                price = ...
                stock = ...

                def clean(self):
                    # Cross-field validation:
                    if self.stock == 0 and self.price > 0:
                        raise Validation(
                            "Out-of-stock products have no price.",
                            code="invalid",  # Options: ./error-identification-codes.txt
                        )


        >> Be aware:
            If you bypass forms usage (e.g., calling Product.objects.create() directly), clean() method WON'T run automatically too.


        >> Clean() differences between Model and Form classes:
            ./clean-differences-between-model-and-form.txt



- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    OTHER VALIDATION LEVELS:
        ./1-validation-basic.txt