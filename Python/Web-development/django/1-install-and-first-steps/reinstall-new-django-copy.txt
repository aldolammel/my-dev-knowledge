

RE-INSTALL ONLY THE DJANGO:


    >> If you are install Django for the very first time, and it's a brand new project,
        skip here and go:

            /Python/Web-development/django/1-install-and-first-steps/0-installing-the-project.txt


    >> If you want just re-install the Django based on the existent project, you can just clone the
        project repository again:

            1) Clone an existent project repo:
                /Versioning/git/basic-commands.txt
            
            2) Carefully, adapt this guide to reinstall the Django project:
                /Python/Web-development/django/1-install-and-first-steps/1-install-with-uv-package.txt


    >> Or if you want to re-install the Django absolutely from scratch (a new Django copy):

        1) Create a new project folder, and get it:

            $ mkdir <project_folder>
            $ cd <project_folder>


        2) Reinstall method:

            2A) Using UV (recommended, more professional)!
            2B) Or using PIP (Django built-in solution).
        
            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

            2A) Using UV:
                Carefully, adapt this guide to reinstall the Django project:
                    /Python/Web-development/django/1-install-and-first-steps/1-install-with-uv-package.txt


            2B) Using PIP:
                Carefully, adapt this guide to reinstall the Django project:
                    /Python/Web-development/django/1-install-and-first-steps/1-install-with-pip-package.txt


            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

        
        1) Re-installing:

            1.1) Create the Django Project Structure:
                
                $ django-admin startproject core .     <-- this install in the current folder!


            1.2) Installing all project dependencies:

                >> Using a file as guide:
                
                    >> Smart method: pyproject.toml
                        /Python/Package-manager/uv/auto-installation-from-pyproject-file.txt
                    
                    >> Old method: requirements.txt
                        /Python/Package-manager/pip/auto-installation-from-requirements-file.txt


                >> (NOT RECOMMENDED) Or manually:

                    >> Using UV:
                        xxxxx

                    >> Using PIP:
                        xxxxx


        2) Make sure you're in the same folder the 'manage.py' file, and then start the django
            for testing purposes:

                # 1/3:
                    $ python manage.py migrate
                    # or
                    $ uv run manage.py migrate

                # 2/3:
                    $ python manage.py runserver
                    # or
                    $ uv run manage.py runserver

                # 3/3:
                    http://localhost:8000/



        3) Files (1/3):
            
            >> First of 3 steps to bring files: from old project folder to the new one, copy these:

                CRITICAL: DO NOT copy the settings.py file yet!!!

                /core/constants.py
                /core/context_processors.py
                /core/language.py                 <--- if you're working with translations!
                /core/middlewares.py              <--- if you're working with translations!
                /core/tests.py
                /core/urls.py
                /locale/                          <--- if you're working with translations!
                /media/
                /static/
                /templates/
                /.env
                /.gitignore

            >> Except the settings.py, check if you don't need other file from the core-folder
                not listed above!

            >> Gitignore-aware: check if the new virtual environment folder is listed there.



        4) Re-create each sub-app needed:

            >> Critical: keep exactly the same original subapp's name to avoid many
                of adjustments on files!

                    $ python manage.py startapp <subapp_name>
                    or
                    $ uv run manage.py startapp <subapp_name>



        5) Database matters:

            >> At first: no settings.py adjustments are need for now! Next step will handle it;

            
            >> If the existent db is local:

                xxxxxxxxxxxxxxxxxxxxxxxx


            >> If the existent db is on the cloud:

                - Do nothing yet! As you have imported the .env file from the old project folder,
                    there should have the environment variables already set, including the db address;


            >> If a new local db:

                xxxxxxxxxxxxxxxxxxxxxxxx


            >> If a new cloud db:

                /Python/Web-development/django/3-1-models-database/1-recreate-database/


            >> Recommended for all scenarios: to avoid weird behaviors from the terminal not calling
                                                the environ variables configured through .env file, 
                                                close the terminal, open a new one and active the
                                                virtual environment of the new Django copy again! 



        6) Files (2/3):

            >> SETTINGS.PY: the second step is to bring line by line from the old project settings to
                            the new settings.py. DON'T just copy the file! Bring carefully line by line
                            instead, checking if the new Django version has news features, etc!

            >> APPS.PY:     If you're using signals.py file somewhere, each sub-app using that needs a
                            small adjustment in its apps.py file:

                                >> Include this method in the sub-app class:

                                    def ready(self):
                                        from . import signals


        7) Files (3/3):
        
            >> Third/last step to bring original Django project files: from the old project folder
                to the new one, copy the list below from each sub-app already created:

                    E.g.

                        /sub-app/admin.py
                        /sub-app/forms.py
                        /sub-app/middlewares.py
                        /sub-app/models.py
                        /sub-app/signals.py
                        /sub-app/validators.py
                        /sub-app/views.py
                        /sub-app/urls.py
                        /sub-app/<all unique files that you won't to code again!>
                        /sub-app/templates/


        8) Finally, let's build up the original project as a new Django copy:

            >> Run 'makemigrations' in the new Django project!

            >> Now, STOP: if you have a multi-language project built up with Parler Module, there's 
                            a known-bug where model-classes using Parler classes inherit will crash,
                            printing out an error when 'migrate' is running. 
                            
                            To fix it, follow:

                                >> Open each '/sub-app/migrations/0001_initial.py' you have found!

                                >> Replace 'parler.models.TranslatableModelMixin'
                                    for 'parler.models.TranslatableModel'

                                >> Save each file changed! If something went wrong, read it!

                                    /Python/Web-development/django/8-translate-and-internationalization/translate-models.txt

            >> Run 'migrate':

                >> If you are using the original project database, after migrate command
                    nothing will correctly happen once the database already have the 'old' schema.

                >> If you are using a new database copy, the migration must run fine until the new db
                    take the right schema, ready to receive the content again!

                    >> In this case, creating the admin user:
                    
                        $ python manage.py createsuperuser
                        Or
                        $ uv run manage.py createsuperuser
            
        
        9) Test it!

            $ python manage.py runserver
            Or
            $ uv run manage.py runserver


        
        10) If the application is using more than one language, test if the site is changing
            the language. If not, just compile the translation again:

            >> Using Gettext/Rosetta/Parler:
                
                # Once the .po files already exists, this will compile them for this new application copy:        
                $ django-admin compilemessages
                Or:
                $ uv run django-admin compilemessages



        11) Clean up some useless stuff:

            /requirements.txt
            /db.sqlite3

