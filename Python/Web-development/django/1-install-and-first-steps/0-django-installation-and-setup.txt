

DJANGO: INSTALLING AND SETUP

    ATTENTION:
        If you are RE-installing Django, skip all of this, and following only this one:
            ./reinstall-new-django-copy.txt


    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    PRE.1) Python interpreter (if needed);
            /Python/01-python-installation/

    PRE.2) Create the project folder, and get it:
            $ mkdir <project_folder>
            $ cd <project_folder>

    PRE.3) Create the project's virtual environment:
            /Python/02-virtual-environment/creating-virtual-environment.txt

    PRE.4) Did you already active project's virtual environment?! I hope so!
            /Python/02-virtual-environment/activate-and-deactivate.txt

    PRE.5) IDE, language setup:
            >> VSCode:  /Python/IDE-softwares/vscode/basic-for-python.txt
            >> PyCharm: /Python/IDE-softwares/pycharm/basic-for-python.txt


    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    0) IDE, framework setup:
        >> VSCode:  /Python/Web-development/django/IDE-softwares/vscode/basic-for-django.txt
        >> PyCharm: /Python/Web-development/django/IDE-softwares/pycharm/basic-for-django.txt


    
    1) Define the Package Manager to setup project for Django:

        1A) Installing Django, using UV (recommended, more professional):
            ./1-with-uv-manager.txt

        1B) Or installing Django, using PIP (Django built-in solution).
            ./1-with-pip-manager.txt

    
    
    2) Creating Django Project Structure:
        
        # Go to the project root folder and ask the package manager to create the 'core' folder:
            # Using UV:
                $ uv run django-admin startproject core .   <-- This dot's important!
            # Using PIP:
                $ django-admin startproject core .          <-- This dot's important!
                

    3) Now, in the project root folder, you must see some files, like 'manage.py', including the folder 'core' with its content. If so, you create the django project correctly! That said, keep going:
        
        3.1) Test Django files:
            $ python manage.py check
            or
            $ uv run manage.py check


        3.2) Ask Django to create its database (further we'll see how to change db systems):
            $ python manage.py migrate
            or
            $ uv run manage.py migrate

        3.3) Run Django to check if it's accessable by your local browsers:
                # Starting Django server:
                    $ python manage.py runserver
                    or
                    $ uv run manage.py runserver
                # On browser:
                    http://localhost:8000/

    


    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        Since this point, you might execute basic tests without the follow steps once your goal
                            would be to test something basic on Django.
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 



    4) Through the Django config-folder (e.g. "core"), open the settings.py file:
    
        4.1) (Skip it if you'll use an existent settings.py model later)
            Organize the settings.py header:

            # App Essential Settings:
            BASE_DIR = ...
            SECRET_KEY = ...
            DEBUG = ...
            ALLOWED_HOSTS = ...


        4.2) Prepare a Global Context with the Essential info about the app:
                /Python/Web-development/django/3-2-views-and-API/1-building-views-context/global-context.txt
        

        4.3) Still in settings.py file, if you WON'T use the SQLite as database:

                >> If you'll use an settings.py model later, save this SECRET KEY to use in the
                    new settings.py later!


        4.4) Define your database:
            /Python/Web-development/django/3-1-models-database/0-installing-and-adminUser/_define-the-database.txt


    5) Defining the back-end environment-variables, and configure Django to read it:
        
        5.1) Create the .env file in the Django project-folder (don't mistake with the core-folder):
        
            >> A) Environment-variables are managed locally;
                    /Environment-Variables/env-for-local/in-backend/.env

            >> B) Or environment-variables are managed by a cloud service;
                    /Environment-Variables/env-for-cloud/in-backend/.env

        5.2) Configure Django to read properly those basic env vars:
            
            /Python/Web-development/django/3-1-models-database/environment-variables-on-django.txt


    6) Linters and formatters:

        PRE) Python linter/formatter/type-checker:
            /Python/IDE-softwares/vscode/basic-for-python.txt
        
        6.1) Django linter/formatter:

            >> Using Djlint (recommended):
                /Python/Web-development/django/Linter-Formatter-Typechecker/djlint.txt

            >> Other options:
                /Python/Web-development/django/Linter-Formatter-Typechecker/_formatter/django-options.txt
                /Python/Web-development/django/Linter-Formatter-Typechecker/_linter/django-options.txt

        6.2) Django type-checker:

            >> Options:
                /Python/Web-development/django/Linter-Formatter-Typechecker/_type-checker/django-options.txt
    
    

    7) Create basic sub-apps in the project's application:

        7.1) (Skip it if you'll use an existent settings.py model later) 
            Show to Django where will be each template folder in your sub-apps, going to the
            core-folder 'settings.py' file and editing this line in 'template' list:
                
                From:
                    'DIRS': [],
                To:
                    'DIRS': [BASE_DIR / 'templates'],


        7.2) If you want to use a settings.py model file, now is the time!
            /Python/Web-development/django/z-project-examples/proj-aldolammel-style/core/settings.py
            
            >> Don't forget to uncomment (of delete) those "TODO:" lines in the settings.py model
                file when you bring it to your project!

            >> Keep commented the Installed sub-apps for now!


        7.3) Adding sub-apps:

            
            >> How to create a sub-app:
                /Python/Web-development/django/2-creating-and-deleting-apps/creating.txt


            >> (I STILL THINKING IF THIS IS NECESSARY!!!!!!!)
                'general' sub-app:
                About: /Python/Web-development/django/z-project-examples/proj-aldolammel-style/general/_readme.txt
                
                g.1) Bring the basic sub-app files and templates-folder too:
                    
                    /Python/Web-development/django/z-project-examples/proj-aldolammel-style/general/

                g.2) Include it in the INSTALLED_APPS in the settings.py file!
                g.3) Makemigrations and migrate!
                g.4) Test it!


            >> Do you need user management through the app front-end too?

                >> If not:
                    /Python/Web-development/django/3-1-models-database/3-users/1-basic-users-only-for-cms.txt

                >> If so:
                    /Python/Web-development/django/3-1-models-database/3-users/2-extending-users.txt


                    >> (I STILL THINKING IF THIS IS NECESSARY!!!!!!! BUT IF SO, ONLY IF ACCOUNTS WAS NEEDED TOO)
                    'in' sub-app:
                    About: /Python/Web-development/django/z-project-examples/proj-aldolammel-style/in/_readme.txt
                    
                    i.1) Bring the basic sub-app files and templates-folder too:
                        
                        /Python/Web-development/django/z-project-examples/proj-aldolammel-style/in/

                    i.2) Include it in the INSTALLED_APPS in the settings.py file!
                    i.3) Makemigrations and migrate!
                    i.4) Test it!


    8) Creating the admin user:
        
        $ python manage.py createsuperuser
        or
        $ uv run manage.py createsuperuser

        # Now, try to login, making sure the main-app is running:
        $ python manage.py runserver
        or 
        $ uv run manage.py runserver

        # Go to:
        http://localhost:8000/admin/



    9) (Skip it if you'll use an existent settings.py model later)
        Will this project have more than one language?

            If not, add in your settings.py:
                USE_I18N = False
                
            Otherwise:
                /Python/Web-development/django/8-translate-and-internationalization/1-starting-translation.txt


    10) Optionals:

        10.1) Will you use file upload?
            /Python/Web-development/django/5-uploads/

        10.2) Will you use image upload?
            /Python/Web-development/django/5-uploads/images/


    11) Install the front-end solution:
    
        11A) Django template solution;
        11B) Or Vue;
        11C) Or React;
        11D) Or Angular;

        - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

        11A) Django template solution:
            /Python/Web-development/django/0-new-project/web-project-django-only.txt


        11B) Vue:
            /Python/Web-development/django/0-new-project/web-project-django-with-vue.txt


        11C) React:
            /Python/Web-development/django/0-new-project/web-project-django-with-react.txt


        11D) Angular:
            /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

        - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

