

DJANGO: WHAT ARE QUERYSETS

    In Django, a QuerySet is a collection of database queries that represents a set of objects from
    your database. It's one of the most powerful and fundamental concepts in Django's ORM (Object-
    Relational Mapper).


    Key Characteristics: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        >> Lazy Evaluation: 
            QuerySets don't hit the db 'til you actually need the data.

                E.g.
                    # No database query executed here
                    users = User.objects.all()

                    # Database query executed here (when we iterate)
                    for user in users:
                        print(user.username)

                >> For partial data:
                    ./qs-partial-data.txt

        >> Chainable:
            You can chain multiple methods together.

                E.g.
                    # Chain multiple filters
                    active_adults = User.objects.filter(
                        is_active=True
                    ).filter(
                        age__gte=18
                    ).exclude(
                        is_staff=True
                    )

        >> Immutable:
            Each chain operation returns a new QuerySet.

                E.g.
                    qs1 = User.objects.all()
                    qs2 = qs1.filter(is_active=True)  # New QuerySet
                    # qs1 remains unchanged

        

    Common QuerySet Operations: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    
        >> Filtering:

            E.g.
                # Basic filtering
                active_users = User.objects.filter(is_active=True)

                # Field lookups
                users_over_30 = User.objects.filter(age__gt=30)
                users_named_john = User.objects.filter(username__startswith='john')

            >> More filtering examples:
                ./qs-filtering.py

        >> Excluding:

            E.g.
                # Exclude certain records
                non_staff_users = User.objects.exclude(is_staff=True)

        >> Ordering:

            E.g.
                # Order by specific fields
                users_ordered = User.objects.all().order_by('last_name', 'first_name')
                reverse_order = User.objects.all().order_by('-date_joined')  # Descending

        >> Slicing:

            E.g.
                # Get first 10 users
                first_10 = User.objects.all()[:10]

                # Get users 11-20
                next_10 = User.objects.all()[10:20]

        >> Aggregation:

            E.g.
                from django.db.models import Count, Avg

                # Count active users
                active_count = User.objects.filter(is_active=True).count()

                # Average age
                avg_age = User.objects.aggregate(Avg('age'))

                # Group by and count
                users_by_city = User.objects.values('city').annotate(count=Count('id'))


            >> More aggretation examples:
                ./qs-aggregation.py


    
    Usign QuerySets with Foreigner Keys: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        ./qs-with-foreigner-keys.txt



    Usign QuerySets with Many-to-Many: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        ./qs-with-many-to-many.txt



    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    >> QuerySets on ADMIN/CMS:
        /Python/Web-development/django/4-cms-admin/1-customizing/detailview-filtering-any-data.py