

EXTENDING THE USER FEATURES WITH PROFILE:

    >> Let's create another model/table in order to isolate extra data associate with each user,
        creating a UserProfile class;

    >> This approach make easier to management user-data that might change drastically if a special
        setting is activated, for example, from personnal account to business one where the data
        associated with the user probably change a lot;


    1) Very basic to use Django built-in user features:
        /Python/Web-development/django/3-1-models-database/3-users/0-users-setup.txt
        /Python/Web-development/django/3-1-models-database/3-users/extending-users-basic.txt



    2) In 'accounts' sub-app, open the 'models.py' file:

        from django.db import models
        from django.contrib.auth.models import AbstractUser


        class User(AbstractUser):
            ...


        class UserProfileOne(models.Model):
            id = models.BigAutoField(
                primary_key=True,
                unique=True,
                editable=False,
            )
            user = models.OneToOneField(
                User,
                on_delete=models.CASCADE,  # Tells Django to del the UserProfileOne if the User is deleted.
                related_name=REL_PROFILE_1,
                verbose_name=lng.LB_PROFILES_USER,
            )
            first_name = models.CharField(
                max_length=VAL_PROFILE_1_NAME_MAXLNGH,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_FNAME,
                validators=[MinLengthValidator(2)],
                help_text=lng.TX_HELP_PROFILE_1_NAME,
                error_messages={
                    'max_length': lng.TX_ERRO_PROFILE_1_FNAME_MAXLNGH
                    % {
                        'txt': lng.LB_PROFILE_1_FNAME,
                        'val': VAL_PROFILE_1_NAME_MAXLNGH,
                    },
                },
            )
            # It's not used anymore!
            """last_name = models.CharField(
                max_length=VAL_PROFILE_1_NAME_MAXLNGH,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_LNAME,
                validators=[MinLengthValidator(3)],
                error_messages={
                    'max_length': lng.TX_ERRO_PROFILE_1_LNAME_MAXLNGH
                    % {
                        'txt': lng.LB_PROFILE_1_LNAME,
                        'val': VAL_PROFILE_1_NAME_MAXLNGH,
                    }
                },
            )"""
            sex = models.CharField(
                max_length=20,
                choices=CHOICES_SEX,
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_1_SEX,
                help_text=lng.TX_HELP_PROFILE_1_SEX,
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_1_SEX_BLNK,
                },
            )
            birthdate = models.DateField(
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_BIRTHDATE,
                help_text=lng.TX_HELP_PROFILE_1_BIRTHDATE,
                error_messages={
                    'invalid': lng.TX_ERRO_PROFILE_1_BIRTH_INVLD,
                },
            )
            birth_year = models.CharField(
                max_length=4,
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_BIRTH_YEAR,
            )
            # TODO
            """phone = models.OneToOneField(
                Phone,
                on_delete=models.SET_NULL,
                null=True,  # Ensure it's optional
                blank=True,  # Allow blank in form
                related_name='user',
                verbose_name=lng.LB_PHONE_NUMBER,
            )"""
            # TODO is_notified_by_phone = models.BooleanField(default=False, verbose_name=lng.LB_NOTIF_BY_PHONE,)
            country = models.ForeignKey(
                Country,
                on_delete=models.SET_NULL,
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_1_COUNTRY,
                help_text=lng.TX_HELP_PROFILE_1_COUNTRY,
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_1_COUNTRY_BLNK,
                },
            )
            is_nomad = models.BooleanField(
                default=False,
                verbose_name=lng.LB_PROFILE_1_NOMAD,
                help_text=lng.TX_HELP_PROFILE_1_NOMAD,
            )
            city = models.CharField(
                max_length=40,
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_CITY,
                help_text=lng.TX_HELP_PROFILE_1_CITY,
                validators=[MinLengthValidator(3)],
            )
            goal_primary = models.ForeignKey(
                Goal,
                related_name='goal_primary_personals',
                on_delete=models.SET_NULL,
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_GOAL_PRI,
                help_text=lng.TX_HELP_PROFILE_1_GOAL_PRI,
            )
            goal_secondary = models.ForeignKey(
                Goal,
                related_name='goal_secundary_personals',
                on_delete=models.SET_NULL,
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_1_GOAL_SEC,
            )
            updated_at = models.DateTimeField(
                auto_now=True,
                blank=True,
                verbose_name=lng.LB_UPDATED_AT,
            )
            updated_by = models.ForeignKey(
                User,
                related_name='updated_profiles_1',
                on_delete=models.SET_NULL,  # if the user-updater is deleted, the updated_by field is null.
                null=True,
                verbose_name=lng.LB_UPDATED_BY,
                help_text=lng.TX_HELP_UPDATED_BY,
            )

            # Model Managers:
            # Reserved space...

            class Meta:
                db_table = 'user_profile_one'
                ordering = ['user', '-updated_at']
                verbose_name = 'Profile, Personal'
                verbose_name_plural = 'Profiles, Personal'

            def __str__(self):
                if self.user:
                    if self.first_name:
                        return f'{self.user.username} ({self.first_name})'
                    return self.user.username
                return lng.CMS_ERRO_PROFILE

            def clean(self):
                """Built-in Model method used to provide custom model-level validation logic, and is called by full_clean() before save() the instance."""
                validate_birth(self.birthdate)
                validate_goals(self.goal_primary, self.goal_secondary)

            def save(self, *args, **kwargs):
                # if self.first_name:
                #     self.first_name = self.first_name.title()  # Let the user choose their way!
                # if self.last_name:
                #     self.last_name = self.last_name.title()  # It's not used anymore!
                if self.city:
                    self.city = self.city.title()
                # Defining the user's birth year automatically:
                if self.birthdate:
                    self.birth_year = str(self.birthdate)[:4]
                # Checking the updated_by:
                # Important: this need to be checked in admin.py and views.py as well!
                user = kwargs.pop('user', None)
                if user and user.is_authenticated and self.updated_by != user:
                    self.updated_by = user
                super().save(*args, **kwargs)


        class UserProfileTwo(models.Model):
            id = models.BigAutoField(
                primary_key=True,
                unique=True,
                editable=False,
            )
            user = models.OneToOneField(
                User,
                on_delete=models.CASCADE,  # Tells Django to del the UserProfileTwo if the User is deleted.
                related_name=REL_PROFILE_2,
                verbose_name=lng.LB_PROFILES_USER,
            )
            business_name = models.CharField(
                max_length=VAL_PROFILE_2_BNAME_MAXLNGH,
                # unique=True,  # Commercial name must be flexible! Legal name, not!
                null=False,
                blank=False,
                verbose_name=lng.LB_PROFILE_2_BNAME,
                help_text=lng.TX_HELP_PROFILE_2_BNAME,
                validators=[MinLengthValidator(4)],
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_2_BNAME_BLNK,
                    # 'unique': 'This business name already exists.'
                    'max_length': lng.TX_ERRO_PROFILE_2_BNAME_MAXLNGH
                    % {
                        'txt': lng.LB_PROFILE_2_BNAME,
                        'val': VAL_PROFILE_2_BNAME_MAXLNGH,
                    },
                },
            )
            legal_name = models.CharField(
                max_length=VAL_PROFILE_2_LEGAL_MAXLNGH,
                unique=True,
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_2_LEGAL,
                help_text=lng.TX_HELP_PROFILE_2_LEGAL,
                validators=[MinLengthValidator(6)],
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_2_LEGAL_BLNK,
                    'unique': lng.TX_ERRO_PROFILE_2_LEGAL_UNIQ,
                    'max_length': lng.TX_ERRO_PROFILE_2_LEGAL_MAXLNGH
                    % {
                        'txt': lng.LB_PROFILE_2_LEGAL,
                        'val': VAL_PROFILE_2_LEGAL_MAXLNGH,
                    },
                },
            )
            country_business = models.ForeignKey(
                Country,
                on_delete=models.SET_NULL,
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_2_COUNTRY,
                help_text=lng.TX_HELP_PROFILE_2_COUNTRY,
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_1_COUNTRY_BLNK,
                },
            )
            city_business = models.CharField(
                max_length=VAL_PROFILE_2_CITY_MAXLNGH,
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_2_CITY,
                help_text=lng.TX_HELP_PROFILE_2_CITY,
                validators=[MinLengthValidator(3)],
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_2_CITY_BLNK,
                    'max_length': lng.TX_ERRO_PROFILE_2_CITY_MAXLNGH
                    % {
                        'txt': lng.LB_PROFILE_2_CITY,
                        'val': VAL_PROFILE_2_CITY_MAXLNGH,
                    },
                },
            )
            description = models.TextField(
                max_length=VAL_PROFILE_2_DESC_MAXLNGH,
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_2_DESC,
                help_text=lng.TX_HELP_PROFILE_2_DESC,
                validators=[MinLengthValidator(40)],
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_2_DESC_BLNK,
                    'max_length': lng.TX_ERRO_PROFILE_2_DESC_MAXLNGH
                    % {
                        'txt': lng.LB_PROFILE_2_DESC,
                        'val': VAL_PROFILE_2_DESC_MAXLNGH,
                    },
                },
            )
            business_url = models.URLField(
                blank=True,
                verbose_name=lng.LB_PROFILE_2_URL,
                validators=[MinLengthValidator(12)],
            )
            social_media = models.URLField(
                blank=True,
                verbose_name=lng.LB_PROFILE_2_URL_SOCIAL,
                validators=[MinLengthValidator(12)],
            )
            business_email = models.EmailField(
                null=True,
                blank=False,
                verbose_name=lng.LB_PROFILE_2_EMAIL,
                validators=[MinLengthValidator(8)],
                error_messages={
                    'blank': lng.TX_ERRO_PROFILE_2_EMAIL_BLNK,
                    'invalid': lng.TX_ERRO_PROFILE_2_EMAIL_INVLD,
                },
            )
            """phone = models.OneToOneField(
                Phone,
                on_delete=models.SET_NULL,
                null=True,  # Ensure it's optional
                blank=True,  # Allow blank in form
                related_name='user',
                verbose_name=lng.LB_PHONE_NUMBER,
            )"""
            # TODO is_notified_by_phone = models.BooleanField(default=False, verbose_name=lng.LB_NOTIF_BY_PHONE,)
            goal_primary = models.ForeignKey(
                Goal,
                related_name='goal_primary_businesses',
                on_delete=models.SET_NULL,
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_2_GOAL_PRI,
            )
            goal_secondary = models.ForeignKey(
                Goal,
                related_name='goal_secundary_businesses',
                on_delete=models.SET_NULL,
                null=True,
                blank=True,
                verbose_name=lng.LB_PROFILE_2_GOAL_SEC,
            )
            busi_first_name = models.CharField(
                max_length=20,
                blank=True,
                verbose_name=lng.LB_PROFILE_2_FNAME,
                validators=[MinLengthValidator(3)],
            )
            busi_last_name = models.CharField(
                max_length=20,
                blank=True,
                verbose_name=lng.LB_PROFILE_2_LNAME,
                validators=[MinLengthValidator(3)],
            )
            updated_at = models.DateTimeField(
                auto_now=True,
                blank=True,
                verbose_name=lng.LB_UPDATED_AT,
            )
            updated_by = models.ForeignKey(
                User,
                related_name='updated_profiles_2',
                on_delete=models.SET_NULL,  # if the user-updater is deleted, the updated_by field is null.
                null=True,
                verbose_name=lng.LB_UPDATED_BY,
                help_text=lng.TX_HELP_UPDATED_BY,
            )

            # Model Managers:
            # Reserved space...

            class Meta:
                db_table = 'user_profile_two'
                ordering = ['user', '-updated_at']
                verbose_name = 'Profile, Business'
                verbose_name_plural = 'Profiles, Business'

            def __str__(self):
                if self.user:
                    if self.business_name:
                        return f'{self.business_name} ({self.user.username})'
                    return self.user.username
                return lng.CMS_ERRO_PROFILE

            def clean(self):
                """Built-in Model method used to provide custom model-level validation logic, and is called by full_clean() before save() the instance."""
                validate_goals(self.goal_primary, self.goal_secondary)

            def save(self, *args, **kwargs):
                if self.business_name:
                    self.business_name = self.business_name.title()
                if self.legal_name:
                    self.legal_name = self.legal_name.upper()
                if self.busi_first_name:
                    self.busi_first_name = self.busi_first_name.title()
                if self.busi_last_name:
                    self.busi_last_name = self.busi_last_name.title()
                if self.city_business:
                    self.city_business = self.city_business.title()
                # Checking the updated_by:
                # Important: this need to be checked in admin.py and views.py as well!
                user = kwargs.pop('user', None)
                if user and user.is_authenticated and self.updated_by != user:
                    self.updated_by = user
                super().save(*args, **kwargs)

        

    3) Create the signal to create a linked UserProfile entry automatically when a new user is
        created via front-end or Django CMS:

        /Python/Web-development/django/7-middlewares-and-signals/signals/signals-user-extended.txt



    
    4) Open the accounts 'admin.py' file, and:

        from django.contrib import admin
        from django.contrib.auth.admin import UserAdmin
        from .forms import CustomUserCreationForm
        from parler.admin import TranslatableAdmin
        from django.utils.html import format_html
        from django.urls import reverse
        from cefalog.constants import (
            REL_PROFILE_1,
            REL_PROFILE_2,
            PATH_CMS_USERS,
        )
        from .models import (
            User,
            UserProfileOne,
            UserProfileTwo,
            Language,
            Country,
            Goal,
        )
        from cefalog.language import (
            TX_PROFILE_1,
            TX_PROFILE_2,
            CMS_MORE_DETAILS,
            CMS_ERRO_PROFILE,
        )


        @admin.register(User)
        class UserCMS(UserAdmin):
            '''Defining how the User Model class will exclusivily be shown on the CMS.'''

            # Specify the custom form for creating users
            add_form = CustomUserCreationForm  # TODO What if I don't use it?

            list_display = (
                'username',
                'email',
                'last_login',
                'is_staff',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            )
            # All fields exclusivily for the CMS Adding New User:
            add_fieldsets = (
                (
                    None,
                    {
                        'classes': ('wide',),
                        'fields': (
                            'profile_type',
                            'username',
                            'email',
                            'password1',
                            'password2',
                            'accepted_min_age',
                            'accepted_our_privacy',
                        ),
                    },
                ),
            )
            # All fields exclusivily for the CMS Visualizing a User:
            fieldsets = (
                (
                    None,
                    {
                        'fields': (
                            'username',
                            'password',
                            'profile_type',
                            'profile_link',  # Adding the UserProfile link in the User Detail-view!
                            'accepted_min_age',
                            'accepted_our_privacy',
                        )
                    },
                ),
                (
                    'Personal info',
                    {
                        'fields': (
                            'email',
                            'language',
                        )
                    },
                ),
                (
                    'Permissions',
                    {
                        'fields': (
                            'is_active',
                            'is_notified_by_email',
                            'is_staff',
                            'is_superuser',
                            'groups',
                            'user_permissions',
                        )
                    },
                ),
                (
                    'Important dates',
                    {
                        'fields': (
                            'date_joined',
                            'last_login',
                            'last_pwd_update',
                            'updated_at',
                            'updated_by',
                        )
                    },
                ),
            )
            list_filter = (
                'profile_type',
                'language',
                'is_notified_by_email',
                'is_active',
                'is_staff',
                'is_superuser',
                # List_filter only accepts imported fields using prefix:
                # Important: Don't call UserProfile's content here in this case!
            )
            search_fields = [
                'username',
                'email',
                'date_joined',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                'userprofileone__first_name',
                #'userprofileone__last_name',  # It's not used anymore!
                'userprofileone__birth_year',
                'userprofileone__city',
                'userprofileone__country',
                'userprofiletwo__busi_first_name',
                'userprofiletwo__busi_last_name',
                'userprofiletwo__business_email',
                'userprofiletwo__city_business',
                'userprofiletwo__country_business',
            ]
            readonly_fields = (
                # 'profile_type',  # Dynamicaly included!
                # 'username',  # Dynamicaly included!
                # 'accepted_min_age',  # Dynamicaly included!
                # 'accepted_our_privacy',  # Dynamicaly included!
                'profile_link',  # Important: don't remove 'profile_link' from here!
                'date_joined',
                'last_login',
                'last_pwd_update',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                # Important: Don't call UserProfile's content here in this case!
            )

            # Create a hyperlink to the associated UserProfile to be used on the list-view and detail-view:
            def profile_link(self, obj):
                if obj.profile_type == '1' and hasattr(obj, REL_PROFILE_1):
                    url = reverse(
                        # Automatic admin-view creation structure: 'admin:app_label_modelname_change':
                        'admin:accounts_userprofileone_change',
                        args=[getattr(obj, REL_PROFILE_1).id],
                    )
                    return format_html("<a href='{}'>{} ({})</a>", url, TX_PROFILE_1, CMS_MORE_DETAILS)
                elif obj.profile_type == '2' and hasattr(obj, REL_PROFILE_2):
                    url = reverse(
                        'admin:accounts_userprofiletwo_change',
                        args=[getattr(obj, REL_PROFILE_2).id],
                    )
                    return format_html("<a href='{}'>{} ({})</a>", url, TX_PROFILE_2, CMS_MORE_DETAILS)
                return CMS_ERRO_PROFILE

            profile_link.short_description = 'User Profile'

            def get_readonly_fields(self, request, obj=None):
                '''Built-in method to extend the 'readonly_fields' power.'''

                if obj:
                    # If the user exists (obj), make some fields field read-only on detail-view,
                    # but still editable on the CMS Add User form:
                    return self.readonly_fields + (
                        'profile_type',
                        'username',
                        'accepted_min_age',
                        'accepted_our_privacy',
                    )  # type: ignore
                return self.readonly_fields

            def save_model(self, request, obj, form, change):
                '''xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.'''
                # Checks to save the current user as updated_by:
                cms_user = request.user
                if change and cms_user != obj.updated_by:
                    obj.updated_by = cms_user
                super().save_model(request, obj, form, change)


        @admin.register(UserProfileOne)
        class UserProfileOneCMS(admin.ModelAdmin):
            '''Defining how the UserProfileOne Model class (personal) will exclusivily be shown on the CMS.'''

            list_display = (
                'user',
                'sex',
                'birth_year',
                'country',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                'user__last_login',
            )
            exclude = ('birth_year',)
            list_filter = (
                'sex',
                'country',
                'is_nomad',
                'goal_primary',
                'goal_secondary',
                # List_filter only accepts imported fields using prefix:
                'user__language',
            )
            search_fields = [
                'user',
                'city',
                'first_name',
                # 'last_name',  # It's not used anymore!
                'birth_year',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                'user__email',
            ]
            readonly_fields = (
                'user',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                'email',  # Imported from User
                'is_notified_by_email',  # Imported from User
                'language',  # Imported from User
                'last_login',  # Imported from User
                'date_joined',  # Imported from User
            )

            # Importing field from User model class:
            def email(self, obj):
                return obj.user.email

            def is_notified_by_email(self, obj):
                return obj.user.is_notified_by_email

            def language(self, obj):
                return obj.user.language

            def last_login(self, obj):
                return obj.user.last_login

            def date_joined(self, obj):
                return obj.user.date_joined

            def formfield_for_foreignkey(self, db_field, request, **kwargs):
                '''This built-in method allows to override the default formfield for a foreign keys field.'''
                # It filters the goal fields by user's profile type:
                if db_field.name in ['goal_primary', 'goal_secondary']:
                    # Get the current object being edited:
                    obj_id = request.resolver_match.kwargs.get('object_id')  # type: ignore
                    if obj_id:
                        # Retrieve the related UserProfile instance:
                        profile = UserProfileOne.objects.get(pk=obj_id)
                        # Filter the queryset based on the user's profile_type:
                        kwargs['queryset'] = Goal.objects.filter(profile_type=profile.user.profile_type)
                return super().formfield_for_foreignkey(db_field, request, **kwargs)

            def get_actions(self, request):
                '''This built-in method can conditionally enable or disable CMS actions, returning
                a dictionary of actions allowed.'''
                # Remove the delete action from the list-view:
                actions = super().get_actions(request)
                if 'delete_selected' in actions:
                    del actions['delete_selected']
                return actions

            def has_delete_permission(self, request, obj=None):
                """This built-in method should return True if deleting obj's allowed."""
                # Prevent deletion of profile from the CMS, except when User is deleted:
                if request.path.startswith(PATH_CMS_USERS):
                    return request.user.is_superuser  # True if superuser!
                return False

            def has_add_permission(self, request):
                """This built-in method should return True if adding obj's allowed."""
                # Prevent the addition of a lone profile accidentally:
                return False

            def save_model(self, request, obj, form, change):
                # Checks to save the current user as updated_by:
                cms_user = request.user
                if change and cms_user != obj.updated_by:
                    obj.updated_by = cms_user
                super().save_model(request, obj, form, change)


        @admin.register(UserProfileTwo)
        class UserProfileTwoCMS(admin.ModelAdmin):
            '''Defining how the UserProfileTwo Model class (business) will exclusivily be shown on the CMS.'''

            list_display = (
                'user',
                'business_name',
                'country_business',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                'user__last_login',
            )
            # exclude = ('', '',)
            list_filter = (
                'country_business',
                'goal_primary',
                'goal_secondary',
                # List_filter only accepts imported fields using prefix:
                'user__language',
            )
            search_fields = [
                'user',
                'description',
                'city_business',
                'busi_first_name',
                'busi_last_name',
                'business_email',
                'date_joined',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                'user__email',
            ]
            readonly_fields = (
                'user',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                'email',  # Imported from User
                'is_notified_by_email',  # Imported from User
                'language',  # Imported from User
                'last_login',  # Imported from User
                'date_joined',  # Imported from User
            )

            def email(self, obj):
                return obj.user.email

            def is_notified_by_email(self, obj):
                return obj.user.is_notified_by_email

            def language(self, obj):
                return obj.user.language

            def last_login(self, obj):
                return obj.user.last_login

            def date_joined(self, obj):
                return obj.user.date_joined

            def formfield_for_foreignkey(self, db_field, request, **kwargs):
                '''This built-in method allows to override the default formfield for a foreign keys field.'''
                # It filters the goal fields by user's profile type:
                if db_field.name in ['goal_primary', 'goal_secondary']:
                    # Get the current object being edited:
                    obj_id = request.resolver_match.kwargs.get('object_id')  # type: ignore
                    if obj_id:
                        # Retrieve the related UserProfile instance:
                        profile = UserProfileTwo.objects.get(pk=obj_id)
                        # Filter the queryset based on the user's profile_type:
                        kwargs['queryset'] = Goal.objects.filter(profile_type=profile.user.profile_type)
                return super().formfield_for_foreignkey(db_field, request, **kwargs)

            def get_actions(self, request):
                '''This built-in method can conditionally enable or disable CMS actions, returning
                a dictionary of actions allowed.'''
                # Remove the delete action from the list-view:
                actions = super().get_actions(request)
                if 'delete_selected' in actions:
                    del actions['delete_selected']
                return actions

            def has_delete_permission(self, request, obj=None):
                '''This built-in method should return True if deleting obj is permitted.'''
                # Prevent deletion of profile from the CMS, except when User is deleted:
                if request.path.startswith(PATH_CMS_USERS):
                    return request.user.is_superuser  # True if superuser!
                return False

            def has_add_permission(self, request):
                '''This built-in method should return True if adding an object is permitted.'''
                # Prevent the addition of a lone profile accidentally:
                return False

            def save_model(self, request, obj, form, change):
                # Checks to save the current user as updated_by:
                cms_user = request.user
                if change and cms_user != obj.updated_by:
                    obj.updated_by = cms_user
                super().save_model(request, obj, form, change)


        @admin.register(Language)
        class LanguageCMS(admin.ModelAdmin):
            list_display = (
                'name',
                'iso_code',
                'status',
                'updated_at',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            )
            list_filter = (
                'status',
                # List_filter only accepts imported fields using prefix:
                # Reserved space...
            )
            """search_fields = [
                'name',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...    
            ]"""
            # exclude = ('xxxxx',)
            readonly_fields = (
                'created_at',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                # Reserved space...
            )

            def save_model(self, request, obj, form, change):
                # Checks to save the current user as updated_by:
                cms_user = request.user
                if change and cms_user != obj.updated_by:
                    obj.updated_by = cms_user
                super().save_model(request, obj, form, change)


        @admin.register(Country)
        class CountryCMS(admin.ModelAdmin):
            list_display = (
                'name',
                'abbreviation',
                'language',
                'status',
                'updated_at',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            )
            list_filter = (
                'language',
                'status',
                # List_filter only accepts imported fields using prefix:
                # Reserved space...
            )
            search_fields = [
                'name',
                'abbreviation',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            ]
            readonly_fields = (
                'created_at',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                # Reserved space...
            )

            def save_model(self, request, obj, form, change):
                # Checks to save the current user as updated_by:
                cms_user = request.user
                if change and cms_user != obj.updated_by:
                    obj.updated_by = cms_user
                super().save_model(request, obj, form, change)


        """
        # TODO!
        @admin.register(Phone)
        class PhoneCMS(admin.ModelAdmin):
            list_display = (
                'phone_id',
                'country_code',
                'region_code',
                'number',
                'owner',
                'created_at',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            )
            list_filter = (
                'country_code',
                # List_filter only accepts imported fields using prefix:
                # Reserved space...
            )
            search_fields = [
                'number',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            ]
            readonly_fields = (
                'phone_id', 
                'owner',
                # Readonly_fields only accept imported method, never with prefix:
                # Reserved space...
            )"""


        @admin.register(Goal)
        class GoalCMS(TranslatableAdmin):
            list_display = (
                'goal',
                'profile_type',
                'status',
                'updated_at',
                # List_display accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            )
            # exclude = ('', '',)
            list_filter = (
                'profile_type',
                'status',
                # List_filter only accepts imported fields using prefix:
                # Reserved space...
            )
            search_fields = [
                'goal',
                # Search_fields accept imported fields using prefix and imported method (prefix recommended):
                # Reserved space...
            ]
            readonly_fields = (
                'created_at',
                'updated_at',
                'updated_by',
                # Readonly_fields only accept imported method, never with prefix:
                # Reserved space...
            )

            def save_model(self, request, obj, form, change):
                # Checks to save the current user as updated_by:
                cms_user = request.user
                if change and cms_user != obj.updated_by:
                    obj.updated_by = cms_user
                super().save_model(request, obj, form, change)


        # Registering Django CMS customizations:
        # Reserved space...




    5) Registration and Profile forms (templates):
        /Python/Web-development/django/10-login-and-logout/1-registering-custom-form.txt


    6) Adding the Change Password option:

        
        X) /accounts/forms.py:

            from django import forms
            from django.contrib.auth import password_validation
            from django.contrib.auth.forms import (
                UserCreationForm,
                AuthenticationForm,
                PasswordChangeForm,
                PasswordResetForm,
                SetPasswordForm,
            )
            from django.utils import timezone
            from datetime import timedelta
            from .models import User, UserProfileOne, UserProfileTwo, Language, Country, Goal
            from cefalog import language as lng
            from cefalog.settings import DATE_INPUT_FORMATS
            from cefalog.constants import (
                VAL_PROFILE_1_BIRTH_MAX,
                VAL_PROFILE_1_BIRTH_MIN,
            )

            # It's needed for birthdate calcs:
            today = timezone.now()


            class CustomUserCreationForm(UserCreationForm):
                '''Customizing the Django User Registration form for front-end.'''

                class Meta:
                    # Connected model to populate:
                    model = User
                    # Ordering fields on the form:
                    fields = [
                        'profile_type',
                        'username',
                        'email',
                        'password1',  # Extra
                        'password2',  # Extra
                        'accepted_min_age',
                        'accepted_our_privacy',
                    ]
                    # Simple and static tweaks only for connected model's fields:
                    widgets = {
                        #'profile_type': forms.Select(attrs={}),
                        'username': forms.TextInput(attrs={'class': 'input is-large'}),
                        'email': forms.EmailInput(attrs={'class': 'input is-large', 'type': 'email'}),
                        'accepted_min_age': forms.CheckboxInput(
                            attrs={'class': 'is-large', 'id': 'accepted_min_age'}
                        ),
                        'accepted_our_privacy': forms.CheckboxInput(
                            attrs={'class': 'is-large', 'id': 'accepted_our_privacy'}
                        ),
                    }

                # Extra fields:
                password1 = forms.CharField(
                    required=True,
                    label=lng.LB_PROFILE_PWD_1,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                    help_text=password_validation.password_validators_help_text_html(),
                )
                password2 = forms.CharField(
                    required=True,
                    label=lng.LB_PROFILE_PWD_2,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                    help_text=lng.TX_HELP_PROFILE_PWD2,
                )


            class CustomLoginForm(AuthenticationForm):
                username = forms.CharField(
                    required=True,
                    label=lng.LB_USER,
                    widget=forms.TextInput(attrs={'class': 'input is-large'}),
                )
                password = forms.CharField(
                    required=True,
                    label=lng.LB_PROFILE_PWD_1,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large'}),
                )
                
                
            class CustomPasswordResetConfirmForm(SetPasswordForm):
                new_password1 = forms.CharField(
                    required=True,
                    label=lng.LB_USER_PWD_NEW,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                    help_text=password_validation.password_validators_help_text_html(),
                )
                new_password2 = forms.CharField(
                    required=True,
                    label=lng.LB_USER_PWD_NEW_CONF,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                    help_text=lng.TX_HELP_PROFILE_PWD2,
                )


            class CustomPasswordChangeForm(PasswordChangeForm):
                old_password = forms.CharField(
                    required=True,
                    label=lng.LB_USER_PWD_OLD,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                )
                new_password1 = forms.CharField(
                    required=True,
                    label=lng.LB_USER_PWD_NEW,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                    help_text=password_validation.password_validators_help_text_html(),
                )
                new_password2 = forms.CharField(
                    required=True,
                    label=lng.LB_USER_PWD_NEW_CONF,
                    widget=forms.PasswordInput(attrs={'class': 'input is-large', 'type': 'password'}),
                    help_text=lng.TX_HELP_PROFILE_PWD2,
                )


            class CustomPasswordResetForm(PasswordResetForm):
                email = forms.CharField(
                    required=True,
                    label=lng.LB_USER_EMAIL,
                    widget=forms.EmailInput(attrs={'class': 'input is-large', 'type': 'email'}),
                )


            class UserProfileOneForm(forms.ModelForm):
                '''UserProfile form specific for Personal usage through front-end.'''

                class Meta:
                    # Connected model:
                    model = UserProfileOne
                    # Ordering fields on form:
                    fields = [
                        'sex',  # from connected model
                        'birthdate',  # from connected model
                        'first_name',  # from connected model
                        #'last_name',  # from connected model # Not used anymore!
                        'email',  # extra
                        'is_notified_by_email',  # extra
                        'language',  # extra
                        'is_nomad',  # from connected model
                        'country',  # from connected model
                        'city',  # from connected model
                        'goal_primary',  # from connected model
                        'goal_secondary',  # from connected model
                        'last_pwd_update',  # extra
                    ]
                    # Simple and static tweaks only for connected model's fields:
                    widgets = {
                        # 'sex': forms.Select(attrs={}),
                        'birthdate': forms.DateInput(
                            format=DATE_INPUT_FORMATS[0],  # Enforcing the db format explicitly!
                            attrs={'class': 'input is-large', 'type': 'date'},
                        ),
                        'first_name': forms.TextInput(attrs={'class': 'input is-large'}),
                        #'last_name': forms.TextInput(attrs={'class': 'input is-large'}), # Not used anymore!
                        'is_nomad': forms.CheckboxInput(attrs={'class': 'is-large', 'id': 'is_nomad'}),
                        # 'country': forms.Select(attrs={}),
                        'city': forms.TextInput(attrs={'class': 'input is-large'}),
                        # 'goal_primary': forms.Select(attrs={}),
                        # 'goal_secondary': forms.Select(attrs={}),
                    }

                # Extra (non-model) fields:
                email = forms.EmailField(
                    required=True,
                    label=lng.LB_USER_EMAIL,
                    widget=forms.TextInput(attrs={'class': 'input is-large'}),
                    help_text=lng.TX_HELP_USER_EMAIL,
                    error_messages={
                        'blank': lng.TX_ERRO_USER_EMAIL_BLNK,
                        'invalid': lng.TX_ERRO_USER_EMAIL_INVLD,
                    },
                )
                is_notified_by_email = forms.BooleanField(
                    required=False,
                    label=lng.LB_USER_NOTIF_BY_EMAIL,
                    widget=forms.CheckboxInput(attrs={'class': 'is-large', 'id': 'is_notified_by_email'}),
                    help_text=lng.TX_HELP_USER_NOTIF_EMAIL,
                )
                language = forms.ModelChoiceField(
                    queryset=Language.objects.filter(status='on'),
                    required=False,
                    label=lng.LB_USER_LANG,
                    help_text=lng.TX_HELP_USER_LANG,
                )
                last_pwd_update = forms.DateTimeField(
                    required=False,
                    label=lng.LB_USER_PWD_LAST_UPDATE,
                    widget=forms.TextInput(attrs={'class': 'input is-small pl-0'}),
                )

                def __init__(self, *args, **kwargs):
                    '''Built-in method called 'Constructor', designed to initialize the instance.'''
                    user = kwargs.pop('user', None)  # Get the current user (from view)!
                    super().__init__(*args, **kwargs)
                    if user:
                        # More complex or dynamic tweaks for connected model's fields:
                        age_min = (timezone.now() - timedelta(days=365.25 * VAL_PROFILE_1_BIRTH_MIN)).date()
                        age_max = (timezone.now() - timedelta(days=365.25 * VAL_PROFILE_1_BIRTH_MAX)).date()
                        self.fields['birthdate'].widget.attrs.update({'max': age_min, 'min': age_max})
                        self.fields['country'].queryset = Country.objects.filter(status='on')  # type: ignore
                        if user.profile_type:
                            # Filter both goal fields based on the user's profile_type:
                            by_type = Goal.objects.filter(status='on', profile_type=user.profile_type)
                            self.fields['goal_primary'].queryset = by_type  # type: ignore
                            self.fields['goal_secondary'].queryset = by_type  # type: ignore

                        # Extra fields, pre-populating:
                        # Unlike fields from connected model, extra fields must be manually linked!
                        self.fields['email'].initial = user.email
                        self.fields['is_notified_by_email'].initial = user.is_notified_by_email
                        self.fields['language'].initial = user.language
                        self.fields['last_pwd_update'].initial = user.last_pwd_update

                def save(self, user=None, commit=True):
                    '''Built-in method that, if triggered, create or update an instance in the connected model.'''
                    instance = super().save(commit=False)  # commit=False will not save in db immediately.
                    if user:
                        instance.updated_at = timezone.now()
                        instance.updated_by = user
                    if commit:
                        instance.save()
                    return instance


            class UserProfileTwoForm(forms.ModelForm):
                '''UserProfile form specific for Business usage through front-end.'''

                class Meta:
                    # Connected model to populate:
                    model = UserProfileTwo
                    # Ordering fields on the form:
                    fields = [
                        'country_business',  # from connected model
                        'city_business',  # from connected model
                        'language',  # extra
                        'business_name',  # from connected model
                        'legal_name',  # from connected model
                        'description',  # from connected model
                        'business_url',  # from connected model
                        'social_media',  # from connected model
                        'business_email',  # from connected model
                        'goal_primary',  # from connected model
                        'goal_secondary',  # from connected model
                        'busi_first_name',  # from connected model
                        'busi_last_name',  # from connected model
                        'email',  # extra
                        'is_notified_by_email',  # extra
                    ]

                # Extra fields:
                email = forms.EmailField(
                    required=True,
                    label=lng.LB_USER_EMAIL,
                )
                is_notified_by_email = forms.BooleanField(
                    required=False,
                    label=lng.LB_USER_NOTIF_BY_EMAIL,
                )
                language = forms.ModelChoiceField(
                    queryset=Language.objects.filter(status='on'),
                    required=False,
                    label=lng.LB_USER_LANG,
                )

                def __init__(self, *args, **kwargs):
                    '''Built-in method called 'Constructor', designed to initialize the instance.'''
                    user = kwargs.pop('user', None)  # Get the current user (from view)!
                    super().__init__(*args, **kwargs)
                    if user:

                        # Connected fields (from connected model), customizations:
                        if user.profile_type:
                            # Filter both goal fields based on the user's profile_type:
                            by_type = Goal.objects.filter(status='on', profile_type=user.profile_type)
                            self.fields['goal_primary'].queryset = by_type  # type: ignore
                            self.fields['goal_secondary'].queryset = by_type  # type: ignore
                            self.fields['country_business'].queryset = Country.objects.filter(status='on')  # type: ignore

                        # Extra fields, pre-populating:
                        # Unlike fields from connected model, extra fields must be manually linked!
                        self.fields['email'].initial = user.email
                        self.fields['is_notified_by_email'].initial = user.is_notified_by_email
                        self.fields['language'].initial = user.language

                def save(self, user=None, commit=True):
                    '''Built-in method that, if triggered, create or update an instance in the connected model.'''
                    instance = super().save(commit=False)  # commit=False will not save in db immediately.
                    if user:
                        instance.updated_at = timezone.now()
                        instance.updated_by = user
                    if commit:
                        instance.save()
                    return instance

        
        
        X) /accounts/views.py:

            from django.contrib.auth.decorators import login_required
            from django.contrib.auth import login, logout
            from django.contrib.auth.views import (
                LoginView,
                PasswordChangeView,
                PasswordResetView,
                PasswordResetConfirmView,
                PasswordResetDoneView,
                PasswordResetCompleteView,
            )
            from django.contrib import messages
            from django.shortcuts import render, redirect, get_object_or_404
            from django.urls import reverse_lazy
            from django.utils import timezone
            from .models import User, UserProfileOne, UserProfileTwo
            from .forms import (
                CustomUserCreationForm,
                CustomLoginForm,
                CustomPasswordResetConfirmForm,
                CustomPasswordChangeForm,
                CustomPasswordResetForm,
                UserProfileOneForm,
                UserProfileTwoForm,
            )
            from cefalog import language as lng
            from cefalog.constants import (
                NAMEAPP_1,  # 'general'
                NAMEAPP_2,  # 'in'
                NAMEAPP_3,  # 'accounts'
                PATTERN_1_1,  # 'home_one_view'
                PATTERN_1_2,  # 'home_two_view'
                PATTERN_2_1,  # 'home_view'
                PATTERN_3_2,  # 'profile_view'
                PATTERN_3_6,  # 'password_reset_done'
                PATTERN_3_8,  # 'password_reset_complete'
            )


            def register(request):
                # Escape if logged-in:
                if request.user.is_authenticated:
                    # There the user will be filtered in Personal or Business:
                    return redirect(NAMEAPP_2 + ':' + PATTERN_2_1)
                # Otherwise:
                else:
                    if request.method == 'POST':
                        form = CustomUserCreationForm(request.POST)
                        if form.is_valid():
                            new_user = form.save()
                            # Automatic log-in after registration:
                            login(request, new_user)
                            return redirect(NAMEAPP_2 + ':' + PATTERN_2_1)
                    else:
                        form = CustomUserCreationForm()
                    # Defining what send to the template:
                    context = {
                        'page_title': lng.S_G_REG_TTL,
                        'form': form,
                        'bt_have_account': lng.BT_LOGIN_HAVE_ACCOUNT,
                        'bt_submit': lng.BT_REG_SUBMIT,
                        'bt_back': lng.BT_BACK,
                    }
                    # Load template:
                    return render(request, 'registration/register.html', context)


            class CustomLoginView(LoginView):
                template_name = NAMEAPP_3 + '/login.html'
                form_class = CustomLoginForm
                redirect_authenticated_user = True
                extra_context = {
                    'page_title': lng.S_G_LOGIN_TTL,
                    'bt_submit': lng.BT_LOGIN,
                    # 'bt_back': lng.BT_BACK,
                    'bt_pwd_forgot': lng.BT_LOGIN_RESET,
                    'bt_new_account': lng.BT_REG_NEW_ACCOUNT,
                }
                success_url = 'in:' + PATTERN_2_1


            # It sends the mail:
            class CustomPasswordResetView(PasswordResetView):
                template_name = 'registration/password_reset.html'
                form_class = CustomPasswordResetForm
                success_url = reverse_lazy(NAMEAPP_3 + ':' + PATTERN_3_6)
                email_template_name = 'registration/password_reset_email_custom.html'
                extra_context = {
                    'page_title': lng.S_G_LOGIN_RESET_TTL,
                    'bt_submit': lng.BT_LOGIN_RESET_SUBMIT,
                    'bt_back': lng.BT_BACK,
                }

                def form_valid(self, form):
                    '''Override form_valid to add custom messages or actions on successful form submission.'''
                    messages.info(self.request, lng.TX_FDBK_LOGIN_RESET)
                    return super().form_valid(form)


            def custom_logout_view(request):
                '''Select a more appropriated home to the user after logout'''
                if request.user.is_authenticated:
                    profile_type = request.user.profile_type
                    logout(request)
                    if profile_type == '2':
                        return redirect(NAMEAPP_1 + ':' + PATTERN_1_2)
                return redirect(NAMEAPP_1 + ':' + PATTERN_1_1)


            # It shows a success message about the email sent with the link to reset the password:
            class CustomPasswordResetDoneView(PasswordResetDoneView):
                template_name = 'registration/password_reset_done_custom.html'
                extra_context = {
                    'page_title': lng.S_G_LOGIN_RESET_TTL,
                }


            # It checks the link the user clicked and prompts for a new password:
            class CustomPasswordResetConfirmView(PasswordResetConfirmView):
                template_name = 'registration/password_reset_confirm_custom.html'
                form_class = CustomPasswordResetConfirmForm
                success_url = reverse_lazy(NAMEAPP_3 + ':' + PATTERN_3_8)
                extra_context = {
                    'page_title': lng.S_G_LOGIN_RESET_TTL,
                    'header': lng.S_I_PROFILE_PWD_TTL,
                    'bt_submit': lng.BT_PROFILE_PWD_SUBMIT,
                }
                
                
            # It shows a success message when the new password is defined in reset proccess:
            class CustomPasswordResetCompleteView(PasswordResetCompleteView):
                template_name = 'registration/password_reset_complete_custom.html'
                extra_context = {
                    'page_title': lng.S_G_LOGIN_RESET_COMPLETE_TTL,
                    #'bt_submit': lng.S_G_LOGIN_NAME,
                }


            class CustomPasswordChangeView(PasswordChangeView):
                template_name = 'registration/password_change.html'
                form_class = CustomPasswordChangeForm

                def form_valid(self, form):
                    '''Override form_valid to add custom messages or actions on successful form submission.'''
                    user = self.request.user
                    # Check if the old password is correct:
                    if user.check_password(form.cleaned_data['old_password']):
                        # Check if the new password is different from the old password:
                        if form.cleaned_data['new_password1'] != form.cleaned_data['old_password']:
                            # Set the new password:
                            user.set_password(form.cleaned_data['new_password1'])
                            user.save()  # save the user instance to the db.
                            messages.success(self.request, lng.TX_FDBK_PROFILE_PWD_UPDATED)
                            return redirect(NAMEAPP_3 + ':' + PATTERN_3_2, username=user.username)
                        else:
                            form.add_error('new_password1', lng.TX_FDBK_PROFILE_PWD_EQUAL_OLD)
                    return self.form_invalid(form)

                def get_context_data(self, **kwargs):
                    # Definitions:
                    user = self.request.user
                    profile_type = lng.TX_PROFILE_1 if user.profile_type == '1' else lng.TX_PROFILE_2
                    context = super().get_context_data(**kwargs)
                    # Building context:
                    context['page_title'] = f'{lng.S_I_PROFILE_PWD_TTL}: {user.username} ({profile_type})'
                    context['header'] = lng.S_I_PROFILE_PWD_TTL
                    context['bt_back'] = lng.BT_BACK
                    context['bt_submit'] = lng.BT_PROFILE_PWD_SUBMIT
                    return context


            @login_required
            def profile_view(request, username):
                # Identifying the current authenticated user and the profile owner:
                user = request.user
                profile_user = get_object_or_404(User, username=username)
                # Privacy control:
                if user != profile_user:
                    return render(request, '401.html', status=401)

                # Take the right profile type:
                is_profile_1 = profile_user.profile_type == '1'
                if is_profile_1:
                    instance = get_object_or_404(UserProfileOne, user=profile_user)
                    form = UserProfileOneForm(instance=instance, user=user)
                    profile_type = lng.TX_PROFILE_1
                else:
                    instance = get_object_or_404(UserProfileTwo, user=profile_user)
                    form = UserProfileTwoForm(instance=instance, user=user)
                    profile_type = lng.TX_PROFILE_2

                # If something's submitted:
                if request.method == 'POST':
                    if 'delete_account' in request.POST:
                        # TODO FIX: DELETION OPTIONS IS NEEDED IN FRONT-END TOO!
                        # instance.delete_instance()
                        logout(request)
                        if is_profile_1:
                            messages.success(request, lng.TX_FDBK_PROFILE_1_DEL)
                            return redirect(NAMEAPP_1 + ':' + PATTERN_1_1)
                        # messages.success(request, TX_FDBK_PROFILE_2_DEL)
                        return redirect(NAMEAPP_1 + ':' + PATTERN_1_2)
                    # Defining the object of the current form, passing also the user object:
                    if is_profile_1:
                        form = UserProfileOneForm(request.POST, instance=instance, user=user)
                    else:
                        form = UserProfileTwoForm(request.POST, instance=instance, user=user)
                    if form.is_valid():
                        # form.save()  # It seems duplicated!!!! So I commented it!
                        # Update the User model fields:
                        # profile_type is NOT available for user edition;
                        profile_user.email = form.cleaned_data['email']
                        profile_user.is_notified_by_email = form.cleaned_data['is_notified_by_email']
                        profile_user.language = form.cleaned_data['language']
                        # Automatically set `updated_by` to the current user if different:
                        if profile_user.updated_by != user:
                            profile_user.updated_by = user
                        profile_user.updated_at = timezone.now()
                        # Save the user object and passing the current user to update UserProfile:
                        profile_user.save()
                        form.save(user=user)
                        messages.success(request, lng.TX_FDBK_PROFILE_SUCC_UPDATED)
                        return redirect(NAMEAPP_3 + ':' + PATTERN_3_2, username=username)

                # Defining what send to the template:
                context = {
                    'page_title': f'{lng.S_I_PROFILE_TTL}: {username} ({profile_type})',
                    'form': form,
                    'profile_type': profile_type,
                    'ttl': lng.S_I_PROFILE_TTL,
                    'bt_submit': lng.BT_PROFILE_SUBMIT,
                    'bt_cancel': lng.BT_CANCEL,
                    'bt_change_pwd': lng.BT_PROFILE_PWD_CHANGE,
                    'bt_del': lng.BT_PROFILE_DEL,
                }
                # Load template:
                if is_profile_1:
                    return render(request, NAMEAPP_3 + '/profile_1.html', context)
                return render(request, NAMEAPP_3 + '/profile_2.html', context)


        X) /accounts/urls.py:

            from django.urls import path
            from . import views
            from cefalog.constants import (
                NAMEAPP_3,
                PATTERN_3_1,
                PATTERN_3_2,
                PATTERN_3_3,
                PATTERN_3_4,
                PATTERN_3_5,
                PATTERN_3_6,
                PATTERN_3_7,
                PATTERN_3_8,
                PATTERN_3_9,
            )

            # Namespace:
            app_name = NAMEAPP_3  # 'accounts'

            urlpatterns = [
                # http://127.0.0.1:8000/ap_name/...
                path('register/',
                    views.register,
                    name=PATTERN_3_1),
                path('login/',
                    views.CustomLoginView.as_view(),
                    name=PATTERN_3_3),
                path('password/',
                    views.CustomPasswordChangeView.as_view(),
                    name=PATTERN_3_4),
                path('password_reset/',
                    views.CustomPasswordResetView.as_view(),
                    name=PATTERN_3_5),
                path('password_reset/done/',
                    views.CustomPasswordResetDoneView.as_view(),
                    name=PATTERN_3_6),
                path('reset/<uidb64>/<token>/',
                    views.CustomPasswordResetConfirmView.as_view(),
                    name=PATTERN_3_7),
                path('reset/done/',
                    views.CustomPasswordResetCompleteView.as_view(),
                    name=PATTERN_3_8),
                path('logout/',
                    views.custom_logout_view,
                    name=PATTERN_3_9),
                path('<str:username>',
                    views.profile_view,
                    name=PATTERN_3_2),
            ]



        X) /accounts/templates/accounts/pwd_change.html:

            /Python/Web-development/django/9-forms/frontend-user-change-password.html





    XX) If you need to customize your CMS Accounts > Users (list-view and/or detail-view):
        /Python/Web-development/django/4-cms-admin/data-from-elsewhere/detailview-attr-from-other-class.py
        /Python/Web-development/django/4-cms-admin/data-from-elsewhere/listview-attr-from-other-class.py



    X) Migrate and test it:

        $ python manage.py makemigrations accounts
        $ python manage.py migrate
        $ python manage.py runserver

        # Now, try the admin and check if you are seen the User Profile area:
        http://127.0.0.1:8000/admin/


    >> Now, each user created will generate a UserProfile instance connected that will be
        available to read/update/delete.



    >> If you need the HTML models for all profile actions (reset password, change password, etc):
       
       /home/aldolammel/Projects/Python-Studies/Python/Web-development/django/9-forms/registration/