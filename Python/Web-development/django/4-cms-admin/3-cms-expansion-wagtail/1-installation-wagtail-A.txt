

DJANGO CUSTOM CMS > WAGTAIL INSTALLATION: ROADMAP A


    ATTENTION:
        If you are RE-installing Wagtail, skip all of this, and following only this one:
            ./reinstall-new-wagtail-copy.txt

    BE AWARE:
        Don't install Django before Wagtail! This installation is a Stand-alone.


    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    PRE.1) Python interpreter (if needed);
        /Python/01-python-installation/

    PRE.2) Create the project folder, and get it:
        $ mkdir <project_folder>
        $ cd <project_folder>

    PRE.3) Create the project's virtual environment:
        /Python/02-virtual-environment/creating-virtual-environment.txt

    PRE.4) Did you already active project's virtual environment?! I hope so!
        /Python/02-virtual-environment/activate-and-deactivate.txt

    PRE.5) IDE, language setup:
        >> VSCode:  /Python/IDE-softwares/vscode/basic-for-python.txt
        >> PyCharm: /Python/IDE-softwares/pycharm/basic-for-python.txt

    PRE.6) IDE, main framework setup:
        >> VSCode:  /Python/Web-development/django/IDE-softwares/vscode/basic-for-django.txt
        >> PyCharm: /Python/Web-development/django/IDE-softwares/pycharm/basic-for-django.txt


    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    1) Define the Package Manager to setup project for Django:

        1A) Installing Django, using UV (recommended, more professional):
            ./1-with-uv-manager.txt

        1B) Or installing Django, using PIP (Django built-in solution):
            ./1-with-pip-manager.txt
 

    X) Once you are in the project folder, create the minimul Python project scaffolding:
        # Using UV:
            $ uv init
        # Or manually creating the pyproject.toml file:
            /Python/Web-development/pyproject.toml
            

    2) Already in the project virtual envinronment, install the Wagtail (contains Django embedded):
        # Using UV:
            $ uv add wagtail
        # Using PIP:
            $ pip install wagtail


    3) In the project root folder:
        
        ATTENTION:
            Avoid 'shadowing', use a different name folder of the main project folder instead.
        
                $ wagtail start <my_wagtail_folder_name>

        
    4) Go to the new wagtail folder just created, and install the wagtail requirements:
        $ cd <my_wagtail_folder_name>
            # Using UV:
                $ uv add -r requirements.txt
            # Using PIP:
                pip install -r requirements.txt


    5) Still in the Wagtail folder, update the database changes after Wagtail installation:
        # Using UV:
            $ uv run manage.py migrate
        # Using Python:
            $ python manage.py migrate


    6) Still in the Wagtail folder, create the superuser:
        # Using UV:
            $ uv run manage.py createsuperuser
        # Using Python:
            $ python manage.py createsuperuser


    7) Test it:
        # Using UV:
            $ uv run manage.py runserver
        # Using Python:
            $ python manage.py runserver


    >> Now, close this file, and keep going with the Wagtail integration:
        ./2-integration.txt