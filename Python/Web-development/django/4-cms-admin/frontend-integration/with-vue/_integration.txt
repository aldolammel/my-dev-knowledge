

BACK AND FRONT-END INTEGRATION: DJANGO AND VUE


    PRE.1) It's crucial 'Pagex' module (sub-app by @aldolammel) be installed in the back-end.

        /Python/Web-development/django/usefull-sub-apps/pagex/pagex.txt

    PRE.2) Data workflow between Django and Vue:
            
        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/django-with-vue-integration.png


    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    x) Create serializers in a new file /pagex/serializers.py to ensure your Django backend serves
        content through the REST API:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/apps/pagex/serializers.py
    
    
    x) Set up API endpoints in Views of Aldo Lammel's Pages-app to expose what the serialization brings from Vue:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/apps/pagex/views.py


    x) In /core/urls.py, initialize the Router and its Viewsets, and then add API endpoints:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/core/urls.py


    x) Remove from Django the Aldo Lammel's Pages-app URLs/API endpoints handling. Vue-Router will handle them instead:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/apps/pagex/urls.py
        

    x) Create a Pinia store to manage page content:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/frontend/src/stores/pages.js


    x) Update your Vue components to use the store data. For example in About.vue:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/frontend/src/pages/About.vue
            

    x) Add CORS settings to allow Vue.js to access the Django API, and update settings.py:

        /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/core/settings.py


    x) Configure the front-end JS build-tool:

        PRE.1) Make sure you already got the front-end .env file:
                /Environment-Variables/env-for-local/in-frontend/.env
        
        PRE.2) Probably you need to install DotEnv to call front-end Environment variables:
                
            $ npm install -D dotenv

        x.1) Basic JS Build-tool settings:
        
            x.1A) Using Vite;
            x.1B) Or using Webpack;

            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            
            x.1A) Using Vite:

                PRE.1) About Vite:
                    /JavaScript/Build-tools/Vite/_about.txt

                x.1A.1) Install the simplest environment variable manager possible:
                    /JavaScript/Web-development/frontend/Vue/Env-Var-Managers/_options.txt

                    >> Important!
                        Vite can handle front-end env vars, but not in your own configuration file!

                x.1A.2) Vite configure file (in front-end folder root):
                    /Python/Web-development/django/4-cms-admin/frontend-integration/with-vue/examples/simple-using-pagex/frontend/vite.config.js

            x.1B) Using Webpack:
            
                PRE) About Webpack:
                    /JavaScript/Build-tools/Webpack/_about.txt

                >> xxxxxx                        
                    /xxxxxxxxxxxxxxxxxxxxxxxxxxxx

            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    x) Test the integration now:

        /Python/Web-development/django/4-cms-admin/frontend-integration/testing-integration.txt
            


