
MODEL FIELD REFERENCE:
https://docs.djangoproject.com/en/5.1/ref/models/fields/



-----------

CREATING DJANGO APPS*:

    >> (*) Personally, I call 'app' as 'sub-app', meanwhile for me 'app' 
        (aka 'main-app' or 'project-folder') is the project itself.

            >> Sub-apps in Django folder's structure:
                /Python/Web-development/django/django-project-folder-structure.txt


    >> Basic to know:
        
        >> file 'models.py' = this file represents through classes each table and its columns 
            to be created for a specific sub-app. Most part of tweaks here will result
            a 'makemigrations' command necessity followed by 'migrate' one.
        
        >> command 'makemigrations' = it's responsible for planning the new features on the db
            based on the changes you have made to your models;
        
        >> command 'migrate' = it's responsible for applying and/or unapplying migrations already
            planned by 'makemigrations' command.

        
    1) In /project-folder/apps/ folder, create each sub-app you need:
    
        $ python manage.py startapp <subapp_name>
        or
        $ uv run manage.py startapp <subapp_name>


    2) Through the views.py into each sub-app created, add a function for the index page to that 
        sub-app;
            
            from django.http import HttpResponse
            def index(request):
                return HttpResponse('<name of the sub-app>')


    3) Create the /sub-app/urls.py file, and add the 'urlpatterns' list in each sub-app path/endpoint:
        
            from django.urls import path
            from . import views

            # NAMESPACE
            app_name = <name of the sub-app>

            urlpatterns = [
                path('', views.index),
            ]


    4) Go to the core folder and open the main urls.py file to include each sub-app URL references:
            
            from django.contrib import admin
            from django.urls import path, include

            urlpatterns = [
                # DJANGO URLS:
                path('admin/', admin.site.urls),

                # APIs:
                # Reserved space...

                # THIRD-PARTY URLS:
                # Reserved space...

                # SUB-APPS:
                path('', include('apps.general.urls')),
                path('<subapp_name>/', include('apps.<subapp_name>.urls')),
                path('<subapp_name>/', include('apps.<subapp_name>.urls')),

                # FRONTEND:
                # reserved space...
            ]


    5) (Optional) If your front-end solution will be Django, create these folders and file into the
        new sub-app folder:
        
        /<subapp_name>/templates/
        /<subapp_name>/templates/<subapp_name>/   <- It's a convention to repeat the sub-app name.
        /<subapp_name>/templates/<subapp_name>/temp.html  <- only for GitHub to create the folder.


    6) Again in core folder, go to 'settings.py' file and add each sub-app name in
        the 'INSTALLED_APPS' list:
        
            # Application definition
            # ABCOO - About each Installed Apps: 
            # <Engineering Data document hyperlink here!!!>
            INSTALLED_APPS = [
                # DJANGO DEFAULT SUB-APPS:
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                # DJANGO ADDITIONAL SUB-APPS:
                # Reserved space...
                # THIRD-PARTY SUB-APPS:
                # Reserved space...
                # APP ORIGINAL SUB-APPS:
                'apps.<project_subapp1_name>',
                'apps.<project_subapp2_name>',
            ]


    7) If you will create/add something now in models.py file, after that, you need to do these steps:
            
        # Ask to Django convert the objects in models to db instructions:
        # Convert for all new sub-apps:
            $ python manage.py makemigrations   OR    $ uv run manage.py makemigrations
        # Or for a specific one:
            $ python manage.py makemigrations <subapp_name>   OR    $ uv run manage.py makemigrations <subapp_name>
        
        # Now, check your app migrations folder to see if the instructions are okay.
        
        # Next, if you gave a green light, ask Django to execute the instructions:
            $ python manage.py migrate
            or
            $ uv run manage.py migrate

    
    8) (Optional) If you need a file for custom functions, create in sub-app folder the file
        'utils.py', and you can call it everywhere as:
            
            # Inside the sama sub-app:
            from .utils import <function_name>

            # Another Django sub-apps:
            from <subapp_name_where_utils_is>.utils import <function_name>
        
    
    9) Test the application again:
        /Python/Web-development/django/_running-app.txt