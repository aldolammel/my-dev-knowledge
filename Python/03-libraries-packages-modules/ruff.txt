

RUFF (Python Linter and code formatter)

    >> You need to use UV package to use Ruff!
        /Python/03-libraries-packages-modules/uv.txt

    >> Already in the right virtual env, installing Ruff to the project:
        $ uv add ruff

    >> If using .gitignore file, add these lines:

        ### Python Linter/Formatter ###
        .ruff_cache/

    >> Create/Edit the Open the project pyproject.toml file:

        >> model file:
            /Python/Web-development/pyproject.toml
    
        >> Python Linter and formatter config:

            [tool.ruff]
            line-length = 100
            [tool.ruff.format]
            quote-style = "single"
            indent-style = "tab"
            docstring-code-format = true
        
        >> Create a list of error exceptions: 
            
            >> If you don't have the file yet, create it:
                /Python/Web-development/pyproject.toml

            >> Apply the error exceptions section:
            
                [tool.ruff.lint]
                ignore = []  # add an error-type like "F401" (with quotes!) to create exceptions.

    
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    
    >> HOW TO CHECK CODE ERRORS:
        $ uv run ruff check


    >> HOW TO FIX CODE ERRORS AUTOMATICALLY:
        $ uv run ruff check --fix


    >> HOW TO FIX CODE FORMATTING:
        $ uv run ruff format                      # Format all files in Django-project-folder **.
        $ uv run ruff format path/to/code/        # Format all files in `path/to/code` (and any subdirectories).
        $ uv run ruff format path/to/file.py      # Format a single file.

        (**) Except those files in folders like .venv/, dist/, build/, .vscode/, .git/, etc...