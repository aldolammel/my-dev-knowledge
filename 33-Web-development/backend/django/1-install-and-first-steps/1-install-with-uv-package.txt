

UV PACKAGE

    >> Extremely fast Python package installer and resolver designed as a drop-in replacement for
        pip and pip-tools workflows.

    >> When you ask to UV to initiate a project, a "uv.lock" file is created automatically,
        garanteeing that all copies of this project will have the same dependencies (like a Docker).

    >> If you lose your virtual environment folder, you can recreate the venv using "uv sync"
        command to re-install the project dependencies fast and easily.

    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    >> BEFORE THE PROJECT: 
    
        1) Make sure you are in the MAIN python environment, not in a virtual one!

        3) Now, install the UV package:

            \04-Basic-Modules\uv.txt

        4) Install all Python versions you will need:

            >> Check which Python versions you got installed:
                $ uv python list
            
            >> E.g. you want to install more than one Python version:
                $ uv python install 3.11 3.12 3.13


    
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    >> PROJECT SETUP:

        X) Open the Project folder through the IDE;


        X) Project versioning:

            >> Create a repository or use an existing one:
                /35-version/
        
        
        X) Choosing the way to create the project:

            6A) CREATING A NEW PROJECT:
            6B) OR I'M GETTING AN EXISTING PROJECT:

            .........................................
        
            6A) CREATING A NEW PROJECT:
        
                >> Project folder:

                    >> Already exist a project folder:
                        # In the project folder (even with a bunch of project files inside):
                        $ uv init .

                    >> Or there's NO project folder yet:
                        # In the Python projects folder:
                        $ uv init <project-name>


                >> Into the first UV steps:
                    
                    >> In pyproject.toml file, check is the Python version is right!

                        >> If not:
                            >> Change it, typing the minimul right python version!
                            >> On terminal, define with version this project will use:
                                $ uv python pin <python-version>
                
                    >> Creating the virtual environment:
                        
                        >> If you already have the .venv folder not created by UV:
                            >> Delete the virtual environment folder!
                            >> Create a new one:
                                $ uv venv
                            >> Activate the virtual environment:
                                >> Linux/Ubuntu:
                                    $ . .venv/bin/activate
                                >> Windows:
                                    $ .venv\Scripts\activate

                        >> Now, run a test:
                            # If needed, it automatically creates the virtual environment to test it:
                            $ uv run main.py


                >> Installing a new project's dependency:

                    >> Make sure you are in the project environment!
                    
                    >> Adding a new dependency:
                        $ uv add <package-name>

                    >> Adding a new dependency only IF DEV environment: 
                        $ uv add --dev <package-name>

                        # This never will be installed in the production environment! ;)

            .........................................

            6B) OR I'M GETTING AN EXISTING PROJECT:

                >> Project folder:
                    
                    >> Already exist a project folder:
                        # In the project folder (even with bunch of project files inside):
                        $ uv init .

                        >> AWARE: if you get an error about "pyproject.toml" file, it's okay!

                    >> Or there's NO project folder yet:
                        # In the Python projects folder:
                        $ uv init <project-name>

                >> Make UV create the virtual environment based on the pyproject.toml file:
                    
                    >> If there's a .venv folder, delete it (make sure you are not in that virtual environment)!
                    
                    >> Create a new virtual environment:
                        $ uv venv

                    >> Activate the virtual environment:
                        
                        # Linux:
                        $ . .venv/bin/activate
                        
                        # Windows:
                        $ .venv\Scripts\activate

                    >> Install the dependencies based on the project pyproject.toml file:
                        $ uv sync

                    >> Local project database:

                        >> You already have the local database created:
                            
                            >> Run the makemigrations command:
                                $ uv run manage.py makemigrations

                            >> Even if no migrations in previously command, run the migrate command:
                                $ uv run manage.py migrate

                        >> OR if you don't have a local database created yet:
                        
                            xxxxxxxxxxxxxxxxxxxx

       
        X) (OPTIONAL) If you have multilanguage support in your project:

            >> With Gettext module:
                
                $ uv run manage.py makemessages --all
                $ uv run manage.py compilemessages
        
        
        X) (OPTIONAL) Make sure you got your .gitignore updated with Django, environment and
                        other things:
                            
                        /35-version/git/gitignore-file.txt


        X) (OPTIONAL) FOR MORE POWER: USING RUFF AS Python linter and code formatter:
                        
                        /04-Basic-Modules/ruff.txt


        >> Continuing the Django configuration after the UV installation section:
            /33-Web-development/backend/django/1-install-and-first-steps/0-installing-the-project.txt

        >> Or run the Django application using UV:
            $ uv run manage.py runserver


     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    >> IF YOU LOSE YOUR VIRTUAL ENVIRONMENT, HOW TO RECREATE IT WITH THE DEPENDENCIES:

        1) Create a new venv;
            $ uv venv
        2) Make sure it's activated;
            $ . .venv/bin/activate
        3) Ask UV to reinstall the dependencies based on the pyproject.toml file:
            $ uv sync


    >> DJANGO EXAMPLES:

        >> How to create a new Django project (in the current folder):
            $ uv run django-admin startproject core .
        