

    STARTING A TRANSLATION PROJECT:


        1) Setup the internationalization project: - - - - - - - - - - - - - - - - - - - - - - - - -

            1.1) Install basic modules:

                >> Gettext Module (to translate the content itself):
                    
                    $ sudo apt update
                    $ sudo apt install gettext

                >> Rosseta app (include an admin sub-app to manage translations):

                    $ python3 -m apt install --upgrade pip
                    $ pip install apt install django-rosetta
            
            
            1.2) In settings.py, add the LocaleMiddleware between 'Session' and 'Common'
                middlewares:

                    MIDDLEWARE = [
                        "django.contrib.sessions.middleware.SessionMiddleware",
                        "django.middleware.locale.LocaleMiddleware",  # Django additional feature!
                        "django.middleware.common.CommonMiddleware",
                    ]

                    >> Crucial: middleware order matters! So double-check with these guidelines:

                        >> Make sure itâ€™s one of the first middleware installed;
                        
                        >> It should come after SessionMiddleware, because LocaleMiddleware makes
                            use of session data;
                        
                        >> It should come before CommonMiddleware because CommonMiddleware needs an
                            activated language in order to resolve the requested URL;

                        >> If you use CacheMiddleware, put LocaleMiddleware after it;
            
            
            1.3) Still in settings.py, in 'internationalization' section:

                # Internationalization
                USE_I18N = True
                LANGUAGE_CODE = 'en'  # Default language!
                LANGUAGES = [
                    (LANGUAGE_CODE, 'English'),
                    ('pt-br', 'Brazilian Portuguese'),
                ]
                LOCALE_PATHS = [BASE_DIR / 'locale']
                USE_TZ = True
                TIME_ZONE = 'America/Sao_Paulo'  # 'UTC'
                # Date and time format settings
                DATE_FORMAT = 'Y-m-d'
                TIME_FORMAT = 'H:i:s'
                DATETIME_FORMAT = 'Y-m-d H:i:s'
                SHORT_DATE_FORMAT = 'd/m/Y'
                SHORT_DATETIME_FORMAT = 'd/m/Y P'
                FIRST_DAY_OF_WEEK = 1  # 0 = Sunday
                # Input format settings
                DATE_INPUT_FORMATS = [
                    '%d-%m-%Y',
                    '%d/%m/%Y',
                    '%d%m%Y',
                ]
                TIME_INPUT_FORMATS = [
                    '%H:%M',
                    '%H%M',
                ]
                DATETIME_INPUT_FORMATS = [
                    '%Y-%m-%d %H:%M',
                    '%Y/%m/%d %H:%M',
                ]



            1.4) Still in the config-folder, edit the main urls.py file:

                from django.conf.urls.i18n import i18n_patterns
                from django.contrib import admin
                from django.urls import path, include

                urlpatterns = i18n_patterns(
                    # DJANGO:
                    path('admin/', admin.site.urls),
                    # THIRD-PARTY:
                    path('rosetta/', include('rosetta.urls')),
                    # PRODUCT:
                    # path('<virtual_folder>/', include('<subapp_name>.urls')),
                    # path('<virtual_folder>/', include('<subapp_name>.urls')),
                )

            1.5) (Optional) Create the 'language.py' file in your config-folder:

                /33-Web-development/general/django/8-translate-and-internationalization/language-file-example.py
                /33-Web-development/general/django/8-translate-and-internationalization/translate-dynamic-compositions.txt
                

      
        2) Defining which text-contents are translatable: - - - - - - - - - - - - - - - - - - - - - 

            2.1) Method to translate Views and Models:

                from django.utils.translation import gettext_lazy as _  # This '_' is a convention!

                class Product(models.Model):
                    name = models.CharField(
                        verbose_name=_("Product Name"),
                        ...
                    )
                    description = models.TextField(
                        verbose_name=_("Description"),
                        ...
                    )

                >> CRUCIAL: after translate your models, remember to run 'makemigrations' 
                            and 'migrate' commands.


            2.2) Method to translate Templates:

                >> Call this in the FIRST line on each html file that's using
                    translation benefits, EXCEPT if the template is calling
                    the template-tag 'extends':
                        
                        {% extends "base.html" %}
                        {% load i18n %}

                    >> Crucial: the 'load' must be called even in 'includes'.


                >> Translating the HTML content itself:
                    
                        <h1>{% trans "Welcome" %}</h1>
                        <p>{% trans "I am Aldo Lammel" %}.</p>

                    >> Sometimes you can easy translate the text directly in the View, sending the
                        translate to template through Context. It's up to you.
            

            2.3) Finishing the definition process:

                >> Don't worry about future updates over the translatable content. 
                    Later, I'll show how-to.

                >> In project-root, create a folder called 'locale';

                >> Create in 'locale' folder the sub-folders for each additional language needed:

                    E.g.

                        /en/ or /en_US/
                        /pt/ or /pt_BR/
                        /es/

                >> Create all language files (.PO):

                    $ django-admin makemessages --all

                    >> Gettext Module automatically will set each .PO file in the right folder.



        3) Non-database Translation process: - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            3.1) Default language:

                >> If your project's product is written in English, probably the default language
                    declared in settings.py is 'en' or some variant of that. That said, you can
                    leave the /en/django.po file untouchable 'cause Gettext will assume each empty
                    'msgstr' means each 'msgid' text is the default/original one;
            

            3.2) Additional language:

                >> In some additional language folder, e.g. /locale/pt_BR/,
                    edit the 'django.po' file:

                        E.g.

                            msgid "Welcome"
                            msgstr "Bem-vindo(a)"

                            msgid "I am Aldo Lammel"
                            msgstr "Me chamo Aldo Lammel"

                >> TIP: after to understand how a .po file works, it's advised to use Rosetta Module
                    to work on a translation:

                        http://127.0.0.1:8000/rosetta/


            3.3) For all or just one (it don't matter) language: once you've translated the strings
                in some .po file, you should to compile that/them:

                    $ django-admin compilemessages


            3.4) To test results:

                E.g.

                    http://127.0.0.1:8000/en/
                    http://127.0.0.1:8000/pt-br/
                    http://127.0.0.1:8000/es/





        
        3) Database Translation process: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            3.1) Install the Parler Module:

                $ pip install django-parler


            3.2) Going back to settings.py, in 'Installed Apps', add:

                'parler',


            3.3) Still throught settings.py, add in 'Internationalization' section:

                PARLER_DEFAULT_LANGUAGE_CODE = LANGUAGE_CODE
                PARLER_LANGUAGES = {
                    None: (
                        {'code': LANGUAGE_CODE,},
                        {'code': 'pt-br',},  # example only!
                    ),
                    'default': {
                        'fallbacks': [PARLER_DEFAULT_LANGUAGE_CODE],
                        'hide_untranslated': False,
                    }
                }

                >> For multi-site project: replace None with the SITE_ID. Each SITE_ID can be added
                    as additional entry in the dictionary.


            3.4) For Models:

                /33-Web-development/general/django/8-translate-and-internationalization/translate-models.txt


            3.5) For CMS, through each sub-app admin.py file that has its models.py envolved:

                /33-Web-development/general/django/8-translate-and-internationalization/translate-cms.txt


            3.6) For Model Managers and Model QuerySets:

                /33-Web-development/general/django/8-translate-and-internationalization/translate-querysets-and-managers.txt
                    




        4) Language switching on the interface: - - - - - - - - - - - - - - - - - - - - - - - - - - 


            4.1) Create a global-context file called 'context_processors.py' in 'general' sub-app:

                from django.conf import settings as stt

                def languages(request):
                    """
                    Add LANGUAGES and current LANGUAGE_CODE to the context globally.
                    """
                    return {
                        'LANGUAGES': stt.LANGUAGES,  # Available languages!
                        'LANGUAGE_CODE': request.LANGUAGE_CODE  # Currently active language!
                    }
            

            4.2) In settings.py, include that new global-context:

                TEMPLATES = [
                    {
                        ...
                        'OPTIONS': {
                            'context_processors': [
                                # DJANGO DEFAULT GLOBAL CONTEXTS:
                                ...
                                # DJANGO ADDITIONAL GLOBAL CONTEXTS:
                                'general.context_processors.languages',
                                # THIRD-PARTY GLOBAL CONTEXTS:
                                ...
                                # APP CUSTOM GLOBAL CONTEXTS:
                                ...
                            ],
                        },
                    },
                ]

            
            4.3) On config-folder urls.py file:

                # DJANGO:
                path('i18n/', include('django.conf.urls.i18n')),
                
                    >> This will enable Django's 'set_language' view, which processes
                        the language change request.


            4.4) On the template:

                <!-- LANGUAGE FORM - START -->
                <form action="{% url 'set_language' %}" method="post">
                    {% csrf_token %}
                    {# Redirect to the current page after switching language: #}
                    <input name="next" type="hidden" value="{{ request.path }}">
                    {# Dropdown: #}
                    <select name="language">
                        {% for lang_code, lang_name in LANGUAGES %}
                            <option value="{{ lang_code }}"{% if lang_code == LANGUAGE_CODE %} selected{% endif %}>
                                {{ lang_name }}
                            </option>
                        {% endfor %}
                    </select>
                    {# Submit button: #}
                    <input type="submit" value="Change / Cambiar / Mudar">
                </form>
                <!-- LANGUAGE FORM - END -->






        5) Final touch: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        
            5.1) Check each translation to fix all 'fuzzy' flag that means the translation needs
                translator attention!
            
            
            5.2) (I never needed) Database: If your database contains any content that will be translated,
                ensure your PostgreSQL database is set up with UTF-8 encoding, which is necessary
                for handling multi-language content.

                    $ psql -U yourusername -d yourdbname -c

