

    STARTING A TRANSLATION PROJECT:


        1) Setup the internationalization project: - - - - - - - - - - - - - - - - - - - - - - - - -

            1.1) Install basic modules:

                >> Gettext Module (to translate the content itself):
                    
                    $ sudo apt update
                    $ sudo apt install gettext

                >> Rosseta app (include an admin sub-app to manage translations):

                    $ python3 -m apt install --upgrade pip
                    $ pip install apt install django-rosetta
            
            
            1.2) In settings.py, add the LocaleMiddleware between 'Session' and 'Common'
                middlewares:

                    MIDDLEWARE = [
                        "django.contrib.sessions.middleware.SessionMiddleware",
                        "django.middleware.locale.LocaleMiddleware",
                        "django.middleware.common.CommonMiddleware",
                    ]

                    >> Crucial: middleware order matters! So double-check with these guidelines:

                        >> Make sure itâ€™s one of the first middleware installed;
                        
                        >> It should come after SessionMiddleware, because LocaleMiddleware makes
                            use of session data;
                        
                        >> It should come before CommonMiddleware because CommonMiddleware needs an
                            activated language in order to resolve the requested URL;

                        >> If you use CacheMiddleware, put LocaleMiddleware after it;
            
            
            1.3) Still in settings.py, in 'internationalization' section:

                # Internationalization
                # https://docs.djangoproject.com/en/5.0/topics/i18n/
                USE_I18N = True
                LANGUAGES = [
                    ('en-us', 'English'),
                    ('pt-br', 'Brazilian Portuguese'),
                ]
                LANGUAGE_CODE = 'en-us'  # Default language
                LOCALE_PATHS = [BASE_DIR / 'locale']
                # Doc: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
                USE_TZ = True
                TIME_ZONE = 'America/Sao_Paulo'  # 'UTC'
                # Date and time format settings
                DATE_FORMAT = 'Y-m-d'
                TIME_FORMAT = 'H:i:s'
                DATETIME_FORMAT = 'Y-m-d H:i:s'
                SHORT_DATE_FORMAT = 'd/m/Y'
                SHORT_DATETIME_FORMAT = 'd/m/Y P'
                FIRST_DAY_OF_WEEK = 1  # 0 = Sunday
                # Input format settings
                DATE_INPUT_FORMATS = [
                    '%d-%m-%Y',
                    '%d/%m/%Y',
                    '%d%m%Y',
                ]
                TIME_INPUT_FORMATS = [
                    '%H:%M',
                    '%H%M',
                ]
                DATETIME_INPUT_FORMATS = [
                    '%Y-%m-%d %H:%M',
                    '%Y/%m/%d %H:%M',
                ]



            1.4) Still in the config-folder, edit the main urls.py file:

                from django.conf.urls.i18n import i18n_patterns
                from django.contrib import admin
                from django.urls import path, include

                urlpatterns = i18n_patterns(
                    path('admin/', admin.site.urls),
                    path('rosetta/', include('rosetta.urls')),
                    # path('<virtual_folder>/', include('<subapp_name>.urls')),
                    # path('<virtual_folder>/', include('<subapp_name>.urls')),
                )


      
        2) Defining which text-contents are translatable: - - - - - - - - - - - - - - - - - - - - - 

            2.1) Method to translate Views and Models:

                from django.utils.translation import gettext_lazy as _  # This '_' is a convention!

                class Product(models.Model):
                    name = models.CharField(
                        verbose_name=_("Product Name"),
                        ...
                    )
                    description = models.TextField(
                        verbose_name=_("Description"),
                        ...
                    )

                >> CRUCIAL: after translate your models, remember to run 'makemigrations' 
                            and 'migrate' commands.


            2.2) Method to translate Templates:

                >> Call this in the FIRST line on each html file that's using
                    translation benefits, EXCEPT if the template is calling
                    the template-tag 'extends':
                        
                        {% extends "base.html" %}
                        {% load i18n %}

                    >> Crucial: the 'load' must be called even in 'includes'.


                >> Translating the HTML content itself:
                    
                        <h1>{% trans "Welcome" %}</h1>
                        <p>{% trans "I am Aldo Lammel" %}.</p>

                    >> Sometimes you can easy translate the text directly in the View, sending the
                        translate to template through Context. It's up to you.
            

            2.3) Finishing the definition process:

                >> Don't worry about future updates over the translatable content. 
                    Later, I'll show how-to.

                >> In project-root, create a folder called 'locale';

                >> Create in 'locale' folder the sub-folders for each additional language needed:

                    E.g.

                        /en/ or /en_US/
                        /pt/ or /pt_BR/
                        /es/

                >> Create all language files (.PO):

                    $ django-admin makemessages --all

                    >> Gettext Module automatically will set each .PO file in the right folder.



        3) Non-database Translation process: - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            3.1) Default language:

                >> If your project's product is written in English, probably the default language
                    declared in settings.py is 'en' or some variant of that. That said, you can
                    leave the /en/django.po file untouchable 'cause Gettext will assume each empty
                    'msgstr' means each 'msgid' text is the default/original one;
            

            3.2) Additional language:

                >> In some additional language folder, e.g. /locale/pt_BR/,
                    edit the 'django.po' file:

                        E.g.

                            msgid "Welcome"
                            msgstr "Bem-vindo(a)"

                            msgid "I am Aldo Lammel"
                            msgstr "Me chamo Aldo Lammel"

                >> TIP: after to understand how a .po file works, it's advised to use Rosetta Module
                    to work on a translation:

                        http://127.0.0.1:8000/rosetta/


            3.3) For all or just one (it don't matter) language: once you've translated the strings
                in some .po file, you should to compile that/them:

                    $ django-admin compilemessages


            3.4) To test results:

                E.g.

                    http://127.0.0.1:8000/en/
                    http://127.0.0.1:8000/pt-br/
                    http://127.0.0.1:8000/es/





        
        3) Database Translation process: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            3.1) Install the Parler Module:

                $ pip install django-parler


            3.2) Going back to settings.py, in 'Installed Apps', add:

                'parler',


            3.3) Still throught settings.py, add in 'Internationalization' section:

                PARLER_DEFAULT_LANGUAGE_CODE = 'en'

                PARLER_LANGUAGES = {
                    None: (
                        {'code': 'en',},
                        {'code': 'en-us',},
                        {'code': 'pt-br',},
                    ),
                    'default': {
                        'fallbacks': ['en'],
                        'hide_untranslated': False,
                    }
                }

                >> For multi-site project: replace None with the SITE_ID. Each SITE_ID can be added
                    as additional entry in the dictionary.


            3.4) Open all your models.py you want to translate the database values too, and convert
                the original models.Model class to TranslatableModel class:

                    E.g.

                        from parler.models import TranslatableModel, TranslatedFields

                        class Movie(TranslatableModel):
                            translations = TranslatedFields(
                                title = ...
                                sinopsys = ...
                            )

                            director = ...
                            year_released = ...

                            ...


            3.5) Through each sub-app admin.py file that has its models.py file envolved:

                E.g

                    from django.contrib import admin
                    from .models import Movie
                    from parler.admin import TranslatableAdmin

                    admin.site.register(Movie, TranslatableAdmin)
                    



            X) xxxxxxxxxxxxxxxx












        5) Final touch: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        
            4.1) Check each translation to fix all 'fuzzy' flag that means the translation needs
                translator attention!
            
            4.2) Language switching (template):

                <form action="{% url 'set_language' %}" method="post">
                    {% csrf_token %}
                    <input name="next" type="hidden" value="{{ redirect_to }}">
                    <select name="language">
                        {% for lang_code, lang_name in LANGUAGES %}
                            <option value="{{ lang_code }}"{% if lang_code == LANGUAGE_CODE %} selected{% endif %}>
                                {{ lang_name }}
                            </option>
                        {% endfor %}
                    </select>
                    <input type="submit" value="Change Language">
                </form>


            4.3) Database: If your database contains any content that will be translated,
                ensure your PostgreSQL database is set up with UTF-8 encoding, which is necessary
                for handling multi-language content.

                    $ psql -U yourusername -d yourdbname -c

















