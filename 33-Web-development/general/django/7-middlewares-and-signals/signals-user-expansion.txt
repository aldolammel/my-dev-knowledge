

USING SIGNALS: EXPANDING THE DJANGO USER DATA


    1) Very basic to use Django built-in user features:

        /33-Web-development/general/django/3-1-backend-models-database/3-users/expanding-users.txt


    2) Create a 'signals.py' file into the 'accounts' sub-app if not available yet, and:

        from django.dispatch import receiver
        from django.db.models.signals import post_save
        from django.contrib.auth.models import User
        from .models import UserProfile


        # The function listens to the post_save signal sent by the User model:
        @receiver(post_save, sender=User)
        def create_or_update_user_profile(sender, instance, created, **kwargs):
            # When the Django User instance is CREATED, it creates the UserProfile instance as well:
            if created:
                # Create the UserProfile with the additional fields data from the form (if available):
                profile_data = getattr(instance, '_profile_data', {})
                UserProfile.objects.create(
                    user=instance,
                    profile_type=profile_data.get(
                        'profile_type', UserProfile._meta.get_field('profile_type').default
                    ),
                    sex=profile_data.get('sex', None),
                    birthdate=profile_data.get('birthdate', None),
                )
            # Otherwise:
            else:
                # Update the profile if it already exists:
                if hasattr(instance, 'profile'):
                    profile_data = getattr(instance, '_profile_data', {})
                    instance.profile.profile_type = profile_data.get(
                        'profile_type', instance.profile.profile_type
                    )
                    instance.profile.sex = profile_data.get('sex', instance.profile.sex)
                    instance.profile.birthdate = profile_data.get('birthdate', instance.profile.birthdate)
                    instance.profile.save()
