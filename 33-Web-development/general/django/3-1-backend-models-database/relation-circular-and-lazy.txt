

RELATION: CIRCULAR & LAZY RELATIONS


    >> Two models that have a circular relationship:

        class Product(models.Model):
            ...
            last_buyer = models.ForeignKey('User')
        
        class User(models.Model):
            ...
            created_products = models.ManyToManyField('Product')

            >> In this example, we have multiple relationships between the same two models.
                Hence we might need to define them in both models. By using the model name as 
                a string instead of a direct reference, Django is able to resolve such dependencies.



    >> Relation with the same model:

        class User(models.Model):
            ...
            friends = models.ManyToManyField('self') 
        
            >> The special self keyword (used as a string value) tells Django that it should form a
            relationship with (other) instances of the same model.



    >> Relationships with other apps and their models (built-in or custom apps):

        class Review(models.Model):
            ...
            product = models.ForeignKey('store.Product')  # '<appname>.<modelname>'

            >> You can reference models defined in other Django apps (no matter if created by you,
            via python manage.py startapp <appname> or if it's a built-in or third-party app) by using
            the app name and then the name of the model inside the app.