
MODELS.PY:

    Most commom django attribute types:


    HTML INPUT                         MODELS FIELDS 

    <input type="text"> .............. CharField(unique=False, max_length=40)
    <textarea> ....................... TextField()
    <select> ......................... CharField(max_length=20, choices=(('value1_db', 'Value1'), ('value2_db', 'Value2')), default='value1_db')
    <boolean> ........................ BooleanField() or NullBooleanField() <- when null=True
    <input type="button"> ............ 
    <input type="checkbox"> .......... ManyToMany() /33-Web-development/general/django/3-database-models/relation-many-to-many.txt
    <input type="color"> .............
    <input type="date"> .............. DateField(auto_now_add=True)
    <input type="datetime-local"> .... DateTimeField(auto_now_add=True)
    <input type="email"> ............. EmailField()
    <input type="file"> .............. FileField(default='', upload_to='this_folder_will_be_in_media_folder/%Y/%m/%d/', max_length=100)
    <input type="hidden"> ............ 
    <input type="image"> ............. ImageField(default='placeholder.png', upload_to='this_folder_will_be_in_media_folder/%Y/%m/%d/', max_length=100, blank=True)
    <input type="month"> ............. 
    <input type="number"> ............ PositiveSmallIntegerField or PositiveIntegerField or IntegerField() or FloatField() or DecimalField()
    <input type="password"> .......... 
    <input type="radio"> ............. 
    <input type="range"> ............. 
    <input type="reset"> ............. 
    <input type="search"> ............ 
    <input type="submit"> ............
    <input type="tel"> ............... 
    <input type="time"> .............. TimeField(auto_now_add=True) or DurationField()
    <input type="url"> ............... URLField(max_length=200) or SlugField(max_length=60)
    <input type="week"> .............. 

    FORM FIELDS, INCLUDING WIDGET FIELDS:
        /33-Web-development/general/django/9-forms/_forms_knowledge.txt

    


    CHARFIELD vs TEXTFIELD

        >> CharField demands a max_length;
                E.g. name = models.CharField(max_length=40)

        >> TextField is free for large amount of text;
                E.g. day_note = models.TextField(max_length=1200)
        
    
    NULL vs BLANK

        >> 'blank=True' means the field is not mandatory.
        
        >> 'null=True' means, if the field is empty, in db the value is storage as 'null', not empty.

        >> Avoid the redundance: e.g. TextField(blank=True, null=True) or CharField (blank=True, null=True)


    AUTO_NOW_ADD vs AUTO_NOW

        >> 'auto_now_add=True' means when a new instance/entry is created in the table, the attribute will be
            filled automatically once.
                E.g. user_created = models.DateTimeField(auto_now_add=True)
        
        >> 'auto_now=True' means when an instance/entry is modified, the attribute will be updated automatically.
                E.g. last_updated = models.DateTimeField(auto_now=True)


    ON_DELETE CASCADE

        >> If you use 'on_delete=models.CASCADE' in a models.py class, you are saying the entire
            database content related with a foreign key must be deleted as well along the foreign key.
                E.g. category = models.ForeignKey(Category, on_delete=models.CASCADE)

    

    VERBOSE NAME

        >> It's possible to add a verbose name for each attribute but it is NOT database level.
            In the database, the column name will exactly be the attribute name as it is.

                E.g default label name will be the attribute name, converting each '_' in space:

                    class Recipe(models.Model):
                        start_datetime = models.DateTimeField()

                    output: 'Start Dateime'
                    

        >> If you set a verbose name in a models.py class, it will be customized on Admin/CMS and
            the web application front-end:

                E.g. in models.py:

                    class Recipe(models.Model):
                        start_datetime = models.DateTimeField(verbose_name='Start')


        >> Except if you customized your forms.py class where, in this case, the front-end will
            shown your attribute/field with another label:

                E.g. in forms.py:

                    class RecipeForm(models.ModelForm):
                        class Meta:
                            labels = {
                                'start_datetime': 'When did it gets start?',
                            }


    RELATED_NAME


        >> When you create a model, you can use an argument called 'related_name' that
            allows you to call this model easily:

                class UserProfile(models.Model):
                    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')

            # So you can access it using that name:
            #    user.profile


        >> In this example, you can call all comments from a specific recipe or from a specific
            user:

                class Comment(models.Model):
                    recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE, related_name='comments') 
                    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')

            # So you can access those results like this:
            #    recipe.comments
            #    or
            #    author.comments