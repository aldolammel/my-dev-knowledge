
MODELS.PY:

    Most commom django attribute types:


    HTML INPUT                         MODELS FIELDS 

    <input type="text"> .............. CharField(unique=False, max_length=40)
    <textarea> ....................... TextField()
    <select> ......................... CharField(max_length=20, choices=(('value1_db', 'Value1'), ('value2_db', 'Value2')), default='value1_db')
    <boolean> ........................ BooleanField() or NullBooleanField() <- when null=True
    <input type="button"> ............ 
    <input type="checkbox"> .......... ManyToMany() /33-Web-development/general/django/3-database-models/relation-many-to-many.txt
    <input type="color"> .............
    <input type="date"> .............. DateField(auto_now_add=True)
    <input type="datetime-local"> .... DateTimeField(auto_now_add=True)
    <input type="email"> ............. EmailField()
    <input type="file"> .............. FileField(default='', upload_to='this_folder_will_be_in_media_folder/%Y/%m/%d/', max_length=100)
    <input type="hidden"> ............ 
    <input type="image"> ............. ImageField(default='placeholder.png', upload_to='this_folder_will_be_in_media_folder/%Y/%m/%d/', max_length=100, blank=True)
    <input type="month"> ............. 
    <input type="number"> ............ PositiveSmallIntegerField or PositiveIntegerField or PositiveBigIntegerField or IntegerField() or FloatField() or DecimalField()
    <input type="password"> .......... 
    <input type="radio"> ............. 
    <input type="range"> ............. 
    <input type="reset"> ............. 
    <input type="search"> ............ 
    <input type="submit"> ............
    <input type="tel"> ............... 
    <input type="time"> .............. TimeField(auto_now_add=True) or DurationField()
    <input type="url"> ............... URLField(unique=True, max_length=200, default='', db_index=True) or SlugField(unique=True, max_length=60, default='', db_index=True)
    <input type="week"> .............. 

    FORM FIELDS, INCLUDING WIDGET FIELDS:
        /33-Web-development/general/django/9-forms/_forms_knowledge.txt

    


    CHARFIELD vs TEXTFIELD

        >> CharField demands a max_length;
                E.g. name = models.CharField(max_length=40)

        >> TextField is free for large amount of text;
                E.g. day_note = models.TextField(max_length=1200)
        
    
    ARGUMENT: NULL vs BLANK

        >> 'blank=True' means the field is not mandatory (models are blank=False as default value).
        
        >> 'null=True' means, if the field is empty, in db the value is storage as 'null', not empty.

        >> If 'null=False', make sure you're using a 'default=' value in case of blank value.

        >> As exception, CharField and TextField the default value is an empty string ('') and
            'null=True' should be avoided.

        >> Avoid the redundance: e.g. CharField(blank=True, null=True)


    ARGUMENT: AUTO_NOW_ADD vs AUTO_NOW

        >> 'auto_now_add=True' means when a new instance/entry is created in the table, the attribute will be
            filled automatically once.
                E.g. user_created = models.DateTimeField(auto_now_add=True)
        
        >> 'auto_now=True' means when an instance/entry is modified, the attribute will be updated automatically.
                E.g. last_updated = models.DateTimeField(auto_now=True)


    ARGUMENT: ON_DELETE 

        >> 'on_delete' is an argument to be use with one-to-one and one-to-many (ForeignKey) models
            where you define what happen with the entire instance if the foreign key is deleted:

            E.g.

                class Director(models.Model):
                    ...
                class Movie(models.Model):
                    ...
                    director = models.ForeignKey(Director, on_delete=..., null=True)
    

                        >> on_delete=models.CASCADE
                            
                            If the director is deleted, movies linked with them will be deleted.


                        >> on_delete=models.PROTECT

                            If the director is deleted, Django will block the go to preserve
                            the relation.


                        >> on_delete=models.SET_NULL

                            If the director is deleted, movies linked with them will get their
                            director field as 'null'.


    ARGUMENT: VERBOSE NAME

        >> It's possible to add a verbose name for each attribute but it is NOT database level.
            In the database, the column name will exactly be the attribute name as it is.

                E.g default label name will be the attribute name, converting each '_' in space:

                    class Recipe(models.Model):
                        start_datetime = models.DateTimeField()

                    output: 'Start Dateime'
                    

        >> If you set a verbose name in a models.py class, it will be customized on Admin/CMS and
            the web application front-end:

                E.g. in models.py:

                    class Recipe(models.Model):
                        start_datetime = models.DateTimeField(verbose_name='Start')


        >> Except if you customized your forms.py class where, in this case, the front-end will
            shown your attribute/field with another label:

                E.g. in forms.py:

                    class RecipeForm(models.ModelForm):
                        class Meta:
                            labels = {
                                'start_datetime': 'When did it gets start?',
                            }


    ARGUMENT: RELATED_NAME

        /33-Web-development/general/django/3-1-backend-models-database/queryset-reverse.txt