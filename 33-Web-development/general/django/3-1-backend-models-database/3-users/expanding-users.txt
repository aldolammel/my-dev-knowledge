

EXPANDING THE USER USAGE


    1) Very basic to use Django built-in user features:
        /33-Web-development/general/django/3-1-backend-models-database/3-users/0-users-setup.txt
        /33-Web-development/general/django/10-login-and-logout/0-registering-by-frontend.txt



    2) In 'accounts' sub-app, open the 'models.py' file:

        from django.contrib.auth.models import User

        class UserProfile(models.Model):
            id = models.BigAutoField(
                primary_key=True,
                unique=True,
                editable=False,
            )
            user = models.OneToOneField(
                User, 
                on_delete=models.CASCADE, 
                related_name='profile',
            )
            sex = models.CharField(
                verbose_name='Biological Sex',
                max_length=20,
                choices=(('f', 'Female'), ('m', 'Male'), ('i', 'Intersex')),
                null=True,
                blank=True,
            )

            class Meta:
                db_table = 'user_profile'
                ordering = ['user', 'sex']
                # verbose_name = 'User Profile'
                # verbose_name_plural = 'User Profiles'

            def __str__(self):
                if self.user:
                    return self.user.username
                return 'ERROR: no profile!'

        

    3) Create the signal to create a linked UserProfile entry automatically when a new user is
        created via front-end or Django CMS:

        /33-Web-development/general/django/7-middlewares-and-signals/signals-user-expansion.txt



    
    4) Open the accounts 'admin.py' file, and:

        from django.contrib import admin
        from .models import UserProfile

        class UserProfileCMS(admin.ModelAdmin):
            list_display = (
                'user',
                'sex',
                'last_login',  # Custom method from other class
            )
            readonly_fields = (
                'user',
                'first_name',
                'last_name',
                'email',
                'date_joined',
                'last_login',
            )
            # exclude = ('xxxx',)
            list_filter = ('sex',)
            search_fields = ['user', 'email', 'first_name', 'last_name']

            def first_name(self, obj):
                return obj.user.first_name

            def last_name(self, obj):
                return obj.user.last_name

            def email(self, obj):
                return obj.user.email

            def date_joined(self, obj):
                return obj.user.date_joined

            def last_login(self, obj):
                return obj.user.last_login

            # Remove the delete action from the list-view:
            def get_actions(self, request):
                actions = super().get_actions(request)
                if 'delete_selected' in actions:
                    del actions['delete_selected']
                return actions

            # Prevent deletion of UserProfile from the CMS, except when User is deleted:
            def has_delete_permission(self, request, obj=None):
                if request.path.startswith('/admin/auth/user/'):
                    return True
                return False

            # Prevent the addition of a lone UserProfile accidentally:
            def has_add_permission(self, request):
                return False

        # Registering Django CMS customizations:
        # Reserved space...
        # Registering Product CMS features:
        admin.site.register(UserProfile, UserProfileCMS)



    5) OPTIONALS:
    
        5.1) If you need to create your front-end Registration and Profile forms:
            /33-Web-development/general/django/10-login-and-logout/1-registering-custom-form.txt

        5.2) If you need to customize your CMS Accounts > Users (list-view and/or detail-view):
            /33-Web-development/general/django/4-cms-admin/data-from-elsewhere/attr-from-other-class-to-detail-view.py
            /33-Web-development/general/django/4-cms-admin/data-from-elsewhere/attr-from-other-class-to-list-view.py


    6) Migrate and test it:

        $ python manage.py makemigrations accounts
        $ python manage.py migrate
        $ python manage.py runserver

        # Now, try the admin and check if you are seen the User Profile area:
        http://127.0.0.1:8000/admin/


    >> Now, each user created will generate a UserProfile instance connected that will be
        available to read/update/delete.