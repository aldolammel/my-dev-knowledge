

EXPANDING THE USER USAGE


    1) Very basic to use Django built-in user features:
        /33-Web-development/general/django/3-1-backend-models-database/3-users/0-users-setup.txt
        /33-Web-development/general/django/10-login-and-logout/0-registering-by-frontend.txt



    2) In 'accounts' sub-app, open the 'models.py' file:

        from django.contrib.auth.models import User

        class UserProfile(models.Model):
            user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
            sex = models.CharField(
                verbose_name='Biological Sex',
                max_length=20,
                choices=(('f', 'Female'), ('m', 'Male'), ('i', 'Intersex')),
                null=True,
                blank=True,
            )
            birthdate = models.DateField(null=True, blank=True)

            def __str__(self):
                return self.user.username

        

    3) Create the signal to create the UserProfile automatically when a new user is
        created in Django:

        /33-Web-development/general/django/7-middlewares-and-signals/signals-user-expansion.txt



    4) Open the accounts 'app.py' file, and ensure that the signals are connected at the right
        time. The common practice is to import the signals module in the ready method of your
        sub-app's configuration class:

            from django.apps import AppConfig

            class AccountsConfig(AppConfig):
                ...
                name = 'accounts'

                def ready(self):
                    import accounts.signals


    
    5) Open the accounts 'admin.py' file, and:

        from django.contrib import admin
        from .models import UserProfile

        class UserProfileCMS(admin.ModelAdmin):
            list_display = (
                'id',
                'user',
                'last_login',  # Custom method from other class
            )
            readonly_fields = (
                'user',
                'first_name',
                'last_name',
                'email',
                'date_joined',
                'last_login',
            )
            # exclude = ('xxxx',)
            list_filter = ('sex',)
            search_fields = ['user', 'email', 'first_name', 'last_name']

            def first_name(self, obj):
                return obj.user.first_name

            def last_name(self, obj):
                return obj.user.last_name

            def email(self, obj):
                return obj.user.email

            def date_joined(self, obj):
                return obj.user.date_joined

            def last_login(self, obj):
                return obj.user.last_login


        admin.site.register(UserProfile, UserProfileCMS)



    6) (OPTIONAL) If you need to customize your registration fields:
        /33-Web-development/general/django/10-login-and-logout/1-registering-custom-form.txt



    7) Migrate and test it:

        $ python manage.py makemigrations accounts
        $ python manage.py migrate
        $ python manage.py runserver

        # Now, try the admin and check if you are seen the User Profile area:
        http://127.0.0.1:8000/admin/


    >> Now, each user created will generate a UserProfile instance connected that will be
        available to read/update/delete.