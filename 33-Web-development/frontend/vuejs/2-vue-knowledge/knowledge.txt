
VUE.JS KNOWLEDGE

    >> With Vue.js, part of the work is done in javascript file, and the another part in the html file.


    >> DECLARATIVE RENDERING
        It's the same as 'Template variable' in Django Templates.
        You can use this only in HTML elements/tags, but never in their attributes (more about it,
        next).

            E.g. 

                {{ my_template_var }}


        >> DECLARATIVE RENDERING FOR DYNAMIC ATTRIBUTES
            If you need to use a Directive (more about it, next) in a HTML attribute, you cannot use
            Declarative Rendering {{ }} but ":" as sufix of the attribute name. Like this example:

                >> context:
                    You're using a for-loop that wanna call an image from db.
                    Each product has an 'image' attribute with the string value:
                        "/img/<nameImage.fileType>"

                    <div v-for="p in products">
                        <img src="/img/anyimage.gif">
                    </div>
                
                >> from this:
                    <img src="/img/anyimage.gif">
                
                >> to this:
                    wrong:
                        <img src={{ p.image }}>
                        <img src="{{ p.image }}">
                    right (using v-bind abbreviation ":" before html-tag's attribute):
                        <img :src="p.image">



    >> DIRECTIVES
        They are special tokens (attributes) in the markup that tell the library to do something to
        a DOM element. They are prefixed with v- to indicate that they are Vue-specific.

        >> v-text             (string)

                <span v-text="msg"></span>
                <!-- or -->
                <span>{{ msg }}</span>

        >> v-html             (string)
        >> v-show             (any)
        >> v-if               (any)

                <h1 v-if="awesome">It's awesome!</h1>

                >> Important: it's NOT recommended to use v-if and v-for on the same element due to
                    implicit precedence.

        >> v-else             (don't expect expression)

                <div v-if="Math.random() > 0.5">
                    Now you see me
                </div>
                <div v-else>
                    Now you don't
                </div>
                
        >> v-else-if          (any)

                <div v-if="type === 'A'">
                    A
                </div>
                <div v-else-if="type === 'B'">
                    B
                </div>
                <div v-else-if="type === 'C'">
                    C
                </div>
                <div v-else>
                    Not A/B/C
                </div>

        >> v-for              (array, object, number, string, iterable)
                
                <div v-for="item in items">
                    {{ item.text }}
                </div>


        >> v-on               (function, inline statement, object (without arg))

            E.g.
                <div
                    v-for="product in products"
                    class="product"
                    v-on: click="product.active = !product.active"
                >
                Or shorter version: <div ... @click="product.active = !product.active">

            E.g.
                # Decrease amount:
                <button @click="product.quantity--"> - </button>
                or
                <button @click="product.quantity = product.quantity - 1"> - </button>

                # Increase amount:
                <button @click="product.quantity++"> + </button>
                or
                <button @click="product.quantity = product.quantity + 1"> + </button>

        >> v-bind             (any (with arg), obj (without arg))

                <img v-bind:src="p.image">
                Or shorter version: <img :src="p.image">

                Also:

                <div v-bind:class="{ selected : product.active }"
                Or shorter version: <div :class="{ selected : product.active }"


        >> v-model            (varies based on value of form inputs element or output of components)
        >> v-slot             (JavaScript expression that's valid in a function arg position)
        >> v-pre              (don't expect expression)
        >> v-once             (don't expect expression)
        >> v-memo             (any[])
        >> v-cloak            (don't expect expression)

