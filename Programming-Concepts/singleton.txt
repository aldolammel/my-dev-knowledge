

SINGLETON

    It's a design pattern that restricts the instantiation of a class to a single object and
    provides a global point of access to that instance.


    >> Key Characteristics: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    
        - Only one instance: 
            The class ensures that only one instance of itself is created;

        - Global access:
            Provides a way to access that single instance from anywhere in the app;

        - Controlled instantiation:
            Prevents other objects from creating new instances.


    >> Why Use Singletons: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        - Shared resources: 
            When you need a single point of control (db connection, logger, configuration);

        - State management:
            When you need to maintain global state across the app;

        - Performance:
            Avoid the overhead of creating multiple instances of expensive objects.


    >> Singleton Examples: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        >> In Python:
            /Python/python-knowledge/25-Classes/singletone.py

        >> In JavaScript:
            /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx