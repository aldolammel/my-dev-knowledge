

    GIT IGNORE FILE:

        1) Create the .gitignore file in the repo root:
            
            >> Model for Django projects:
                /Python/Web-development/django/z-project-examples/proj-aldolammel-style/.gitignore
            
            >> xxxxxxxxxxxxxxxxxxxx
            

        2) Online Generator (options):
            https://mrkandreev.name/snippets/gitignore-generator/
            https://www.toptal.com/developers/gitignore

        3) Considering:
            Linux
            Windows
            macOS
            PyCharm
            VisualStudioCode
            Python
            Django or Flask
            VirtualEnv
            Git
            Node.js
            Vue.js
            css
            SCSS
            SASS
            Stylus
            less

        4) Including in .gitignore manually:

            .env
            frontend/.env
            
            .idea/
            .idea/workspace.xml
            .idea/tasks.xml

            Find .vscode manually and:
            #.vscode/*  # For projects using the vscode settings.json!
            #!.vscode/settings.json
            #!.vscode/tasks.json
            #!.vscode/launch.json
            #!.vscode/extensions.json
            #!.vscode/*.code-snippets


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        
        
        IGNORING A FOLDER/FILE FROM NOW ON:

       
            1) First, manually add the folder name in gitignore file;

            2) Tell Git not to track that folder/file again:
                
                $ git rm --cached <file_name>     or    git rm -r --cached <folder_name>
            
            3) Commit the changes:
                
                $ git commit -a -m "Gitignore updated"
            
            
            4) The git rm command, along with the --cached option, deletes the file from the
                repository but does not delete the actual file. This means the file remains on 
                your local system and in your working directory as an ignored file:
            
                >> To delete a local branch
                    
                    # branches list:
                    $ git branch -a
                
                    # removing a local one:
                    $ git branch -d <branch_name>
                
                >> To delete a remote branch
                    
                    # branches list:
                    $ git branch -a
                    
                    # removing a remote one:
                    $ git push origin -d <branch_name>