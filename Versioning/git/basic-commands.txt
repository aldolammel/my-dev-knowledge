

    GIT:

        It's a version system to control project files version.

        >> Git workflow:

            1. Local > You develop something locally;
            2. Local > Send it to Local Stage area (git add);
            3. Local > Send it to Local Repo (git commit);
            4. Remote > Send it to Remote Repo (git push);
            5. Merge or not the main branch.


        >> Creating a new repository (by terminal):
            
            # Creating the project folder:
                $ mkdir <project-name>
            
            # In the project folder:
                $ echo "# Project Name Here" >> README.md
                $ git init
                $ git add README.md
                $ git commit -m "first commit"
                $ git branch -M main
                $ git remote add origin https://github.com/abcoo-ideias/<project_simpler_name>.git
                $ git push -u origin main


        >> Getting in/Cloning an existent project/respository:

            $ git clone HTTPS_OF_PROJECT .      // that "." makes the clone to be installed
                                                //exactly in the folder where you are, dont
                                                // creating the parent folder.

            $ git status            // everything must be fine.

        
        >> Checking which branch you are:
        
            # check local branch:
                $ git branch

            # check all branches available, including local:
                $ git branch -a


        >> Switching to another branch:
        
            # If the branch exists locally:
                $ git checkout <branch_name>

            # If the branch exists only remotely:
                $ git checkout -b branch_name origin/branch_name


        >> Creating a new local branch:
        
            # creating it:
                $ git branch <new_branch_name>

            # selecting it:
                $ git checkout <new_branch_name>

            >> remider: create it as remote too!


        >> Creating a new remote branch:
        
            # After creating it locally and selecting it, do it:
                $ git push --set-upstream origin <new_branch_name>


        >> Checking if you have the last version of the main:
        
            # A report with all commits:
                $ git log

            # Find all changes without merging these changes into your current working branch:
                $ git fetch origin
            # OR below, it fetches and merges (or rebases) changes: 
                $ git pull


        >> Force the original branch again:
        
            # Check exactly the branch name you want:
                $ git branch -a
            # Download that:
                $ git reset --hard <branch_name>



        >> Put a specific file/specific changes on LOCAL STAGE:
        
            $ git add <file-name>


        >> Stages your specific changes in the current directory and its subdirectories. 
            It stages modifications and new files but does not include deletions:
        
                $ git add .


        >> Stages all your changes in the entire working directory, including modifications,
            new files, and deletions. It stages changes in the entire repository:
        
                $ git add --all


        >> Sending your changes to the LOCAL REPO:
        
            $ git commit -a -m "some description"


        >> Taking updates from teammates to the REMOTE same branch:
        
            $ git pull


        >> Publishing your changes (from Local Repo) to the REMOTE same branch:
        
            $ git push

            or

            $ git remote add origin https://github.com/<organization-name>/<project_name>.git
            $ git branch -M main (or the name of the right branch to use)
            $ git push -u origin main (or the name of the right branch to do it)


        >> Deleting a file (from local machine and repository):
        
            $ git rm <file>
            $ git status                          // only to check what's ready for the stage.
            $ git commit -m "removed useless file"
            $ git push


        >> Deleting a folder (from local machine and repository):

            $ git rm -r <folder>
            $ git status                          // only to check what's ready for the stage.
            $ git commit -m "removed useless folder"
            $ git push

        
        >> Deleting a file (only from repository):

                $ git rm --cached <full_file_name>
                $ git commit -m "removed useless file only from repo"
            
            >> Now, make sure you updated .gitignore file with the file to avoid!

                # Update the repo:
                    $ git push

        >> Deleting a folder (only from repository):

                $ git rm -r --cached <full_folder_name>
                $ git commit -m "removed useless folder only from repo"
            
            >> Now, make sure you updated .gitignore file with the folder to avoid!
            
                # Update the repo:
                    $ git push


        >> Deleting a local branch:

            $ git branch -d <branch-name>


        >> Deleting a remote branch:

            $ git push origin --delete <branch-name>


        >> Deleting the local repository:
            # delete the .git folder,
            # or inside the project folder, do it:
                $ rm -rf .git

    


        >> Restore a file to its original content:

            $ git checkout <file>                 // bringing the file content from the origin.