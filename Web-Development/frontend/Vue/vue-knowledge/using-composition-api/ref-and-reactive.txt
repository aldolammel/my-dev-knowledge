

COMPOSITION API APPROACH: REF() AND REACTIVE()

    In Vue.js Composition API, ref() and reactive() are both used to create reactive data, but
    they serve different purposes:

        
        >> REF()
            
            For primitive values (strings, numbers, booleans) and when you need a single
            reactive value:

            E.g.
                
                # .vue file:
                <script setup>
                import { ref } from 'vue'

                // For primitive values
                const count = ref(0)
                const message = ref('Hello')
                const isVisible = ref(true)

                // Access/modify the value using .value
                count.value = 10
                console.log(message.value) // 'Hello'
                </script>

        
        >> REACTIVE()

            For objects and arrays when you want the entire object to be reactive:

            E.g.

                # .vue file:
                <script setup>
                import { reactive } from 'vue'

                // For objects
                const user = reactive({
                    name: 'John',
                    age: 30,
                    preferences: {
                        theme: 'dark'
                    }
                })

                // For arrays
                const items = reactive(['apple', 'banana', 'orange'])

                // Access/modify directly (no .value needed)
                user.name = 'Jane'
                user.age = 31
                items.push('grape')
                </script>