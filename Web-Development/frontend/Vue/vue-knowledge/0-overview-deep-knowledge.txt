

VUE.JS DEEPER KNOWLEDGE

    >> What is Vue.js (basic):
        /Web-Development/frontend/Vue/vue-knowledge/_about.txt

    >> Two options for the product's structure with Vue.js:

        1) Multi-Page-Application (MPA);
            Each section/matter of the app has its own page and URL, demanding the browser a reload
            for each page visited;

        2) Single-Page-Application (SPA);
            Each section/matter of the app belongs just one page, not demanding any kind of reload
            from the browser;

        >> About both strategies, examples of their folder's structures:
            /Web-Development/frontend/Vue/1-install-and-first-steps/backend-python-django.txt    
    
    >> Two main Vue-cores:
        
        1) Declarative Rendering:
            Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.

        2) Reactivity:
            Vue automatically tracks JavaScript state changes and efficiently updates the DOM (Document Object Model) when changes happen.

    
    >> Vue.js development files (.vue) is splitted in 3 layers:
        
        1) Script: 
            Where the Vue.js methods and other functions stuff is set.
                In a .vue file, it is represented by a <script> tag.

        2) Template:
            Where the user interacts with the web application.
                In a .vue file, it is represented by a <template> tag.

        3) Style:
            Where CSS classes used by Vue.js will be stored.
                In a .vue file, it is represented by a <style> tag.

        >> Convention about layer's order in component/app files:
            - For "Options API" approach: template, script, style;
            - For "Composition API" approach: script, template, style;
    

    >> Vue logic structure:
        /Web-Development/frontend/Vue/vue-knowledge/1-vue-structure.txt

    
    >> With Vue.js, part of the work is done in JavaScript file, and another part
        in the HTML file.


    >> To create a Vue.js project, you need a Build-Tool. Here is some options:
        /Web-Development/frontend/Vue/vue-knowledge/1-build-tools.txt


    >> DECLARATIVE RENDERING
        It's the same as 'Template variable' in Django Templates, for example.
        You can use this only in HTML elements/tags, but never in their attributes (more about it,
        next).

            E.g. 

                {{ my_template_var }}


        >> DECLARATIVE RENDERING FOR DYNAMIC ATTRIBUTES
            If you need to use a Directive (more about it, next) in a HTML attribute, you cannot use
            Declarative Rendering {{ }} but ":" as sufix of the attribute name. Like this example:

                >> context:
                    You're using a for-loop that wanna call an image from db.
                    Each product has an 'image' attribute with the string value:
                        "/img/<nameImage.fileType>"

                    <div v-for="p in products">
                        <img src="/img/anyimage.gif">
                    </div>
                
                >> from this:
                    <img src="/img/anyimage.gif">
                
                >> to this:

                    wrong:
                        <img src={{ p.image }}>
                        <img src="{{ p.image }}">

                    right (using v-bind abbreviation ":" before html-tag's attribute):
                        <img :src="p.image">


        >> CONDITIONAL DECLARATIVE RENDERING

            {{ book.isReady ? "I'm ready" : 'NOT READY YET' }}

    
    >> VUE APPs AND THEIR COMPONENTS

            /Web-Development/frontend/Vue/vue-knowledge/5-components.txt


    