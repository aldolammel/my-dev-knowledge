

VUE.JS: ITS FILES AND FOLDER STRUCTURE


    Important: if you are using Vite as Built-tool, it already will manage the SCSS files 
                compilation as well as other files compilation. So try do NOT customize
                compilation paths, like to force the css files in /public/ folder!

                More about compilation time:
                    /Web-Development/frontend/Vue/vue-knowledge/90-go-live-compilation.txt


    >> Vue folder structure:


        Structure to copy:
            /Web-Development/frontend/Vue/z-example-structure/aldolammel-style/


        frontend/
        ├── node_modules/        # stores all dependencies of the project and node.js stuff.
        │
        ├── public/              # No bundling, no transformations. Use it for static assets you reference by absolute path.
        │   ├── favicon.ico
        │   ├── manifest.json    # for PWA configuration.
        │   ├── robots.txt       # xxxxx.
        │   ├── sitemap.xml      # xxxxx.
        |   └── ...
        │
        ├── src/                             # Where the entire Vue project is. For example, Vite build-tool watches this folder!
        │   ├── assets/                      # Those files that aren't public.
        |   |   ├── imgs/                    # Images that need optimization or processing.
        |   |   |   ├── logo.svg
        |   |   |   ├── bg.jpg
        |   |   |   └── ...
        |   |   |
        |   │   ├── styles/                  # Files that should be imported in components or main.js. Keep design tokens and CSS resets here.
        │   │   │   ├── app.scss             # Everything about this project product styling.
        │   │   │   ├── css-framework.scss   # File that imports CSS framework installed for this project.
        │   │   │   └── ...
        │   │   │   
        │   │   └── ...
        │   │
        │   ├── components/
        |   |   ├── common/               # Reusable dumb components (Button, Modal).
        │   │   │   ├── BestProducts.vue  
        │   │   │   ├── Newsletter.vue       
        │   │   │   ├── Testimonials.vue  
        │   │   │   └── ...
        │   │   │
        |   |   ├── layout/               # Layout components (AppHeader, Navigation).
        │   │   │   ├── SiteHeader.vue
        │   │   │   ├── SiteFooter.vue
        │   │   │   ├── NavMain.vue
        │   │   │   └── ...
        │   │   │
        |   |   └── pages/                # Components specific to a page/route.
        |   |       ├── Home.vue
        │   │       ├── About.vue      
        │   │       └── ...
        │   │
        │   ├── hooks/                # For custom Composition API functions (hooks), conventionally its files using 'use' as prefix.
        |   |   ├── useAuth.js
        |   |   └── ...
        │   │
        │   ├── libs/                 # Where all main library files are. Anything that connects the app to the world.
        |   |   ├── bootstrap.js
        |   |   └── ...
        │   │
        │   ├── router/           # Where routes and lazy-load pages are defined.
        |   |   ├── router.js     # Router config file.
        │   │   └── routes.js     # Where routes are defined.
        |   |
        │   ├── stores/           # Where things are caching from APIs.
        │   │   ├── menus.js      # Caching/storing data from menus managed by back-end.
        │   │   └── pages.js      # Caching/storing data from pages managed by back-end.
        |   |
        │   ├── utils/                         # Tiny, pure functions that do one thing well, but not a lib and no Vue reactivity.
        │   │   ├── env.js                     # Calling front-end environment vars.
        │   │   └── tinyslider-testimonial.js
        │   │
        │   ├── App.vue          # Root component page (main-vue-app).  <---------------
        │   └── main.js          # JavaScript config file of the main-vue-app.
        │
        ├── .env                 # Exclusive front-end environment variables. 
        ├── index.html           # Run it to see the app on the browser. 
        └── package.json



        >> Example of a Django folder project with Vue:
            /Web-Development/frontend/Vue/1-install-and-first-steps/project-folder-structure-vue-and-django.txt


    >> A Vue.js app file (.vue) divide itself by 3 layers:
        1) Script
        2) Template
        3) Style

        Important basic knowledge about each one:


        >> <SCRIPT> layer:
            
            >> There are 2-ways to code components, using 'Options API' or 'Component API' but both
                use JavaScript (TypeScript is optional) to be written:
                
                    /Web-Development/frontend/Vue/vue-knowledge/3-approaches-to-code.txt


        >> <TEMPLATE> layer:

            >> Templates is basically pure HTML, and each template can be fragmented in infinite
                other small pieces, using Vue Component structure associated with Vue Slots:

                    /Web-Development/frontend/Vue/vue-knowledge/5-components.txt
                    /Web-Development/frontend/Vue/vue-knowledge/5.4-slot.txt


        >> <STYLE> layer:

            >> Each component (.vue file, for example) can have its own <style> tag where all the
                style coded in there can be glogal (for the parent component and its child ones) or
                local so the style tag is restricted only to the component the style tag belongs.

                    <!-- if 'scoped', the style is only local for the current component -->
                    <style scoped>
                        ...
                    </style>



>> MORE ABOUT:
    /Web-Development/frontend/Vue/vue-knowledge/0-overview-deep-knowledge.txt


>> INSTALL A VUE PROJECT:
    /Web-Development/frontend/Vue/1-install-and-first-steps/_installation.txt