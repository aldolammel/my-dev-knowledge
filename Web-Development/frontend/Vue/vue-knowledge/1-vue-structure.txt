

VUE.JS: ITS FILES AND FOLDER STRUCTURE


    Important: if you are using Vite as Built-tool, it already will manage the SCSS files 
                compilation as well as other files compilation. So try do NOT customize
                compilation paths, like to force the css files in /public/ folder!

                More about compilation time:
                    /Web-Development/frontend/Vue/vue-knowledge/90-go-live-compilation.txt


    >> Vue folder structure:

        frontend/
        ├── node_modules/        # stores all dependencies of the project and node.js stuff.
        │
        ├── public/              # No bundling, no transformations. Use it for static assets you reference by absolute path.
        │   ├── favicon.ico
        │   ├── manifest.json    # for PWA configuration.
        │   ├── robots.txt       # xxxxx.
        │   ├── sitemap.xml      # xxxxx.
        |   └── ...
        │
        ├── src/
        │   ├── assets/                      # Those files that aren't public.
        |   |   ├── imgs/                    # Images that need optimization or processing.
        |   |   |   ├── logo.svg
        |   |   |   ├── bg.jpg
        |   |   |   └── ...
        |   |   |
        |   │   ├── styles/                  # Files that should be imported in components or main.js. Keep design tokens and CSS resets here.
        │   │   │   ├── app.scss             # Everything about this project product styling.
        │   │   │   ├── css-framework.scss   # File that imports CSS framework installed for this project.
        │   │   │   └── ...
        │   │   │   
        │   │   └── ...
        │   │
        │   ├── components/           # Reusable components (pieces of code).
        │   │   ├── NavMain.vue       # Example of a component.
        │   │   ├── HeroBig.vue
        │   │   ├── Newsletter.vue
        │   │   ├── Footer.vue
        │   │   └── ...
        │   │
        │   ├── features/             # Features that can include their own components, slices, API calls, etc.
        |   |   ├── profile_example/  # The idea is encapsulation. If you deleted this folder, that whole feature should disappear.
        |   |   └── ...
        │   │
        │   ├── hooks/                # Custom hooks. If it starts with use, it probably belongs here.
        |   |   ├── useAuth.js
        |   |   └── ...
        │   │
        │   ├── libs/                 # Where all main library files are. Anything that connects the app to the world.
        |   |   ├── router.js
        |   |   ├── store.js
        |   |   ├── bootstrap.js
        |   |   └── ...
        │   │
        │   ├── pages/            # Pages/Views that router points to. They compose features and components into something meaningful.
        │   │   ├── Home.vue      # Example of a page (sub-app/page/view).
        │   │   ├── About.vue       
        │   │   └── ...
        │   │
        │   ├── router/           # Where it's define routes and lazy-load pages.
        │   │   └── routes.js     # Router config file.
        |   |
        │   ├── utils/           # Tiny, pure functions that do one thing well, but not a lib.
        │   │
        │   ├── App.vue          # Root page/component (main-app itself).  <---------------
        │   └── main.js          # JavaScript config file of the main-app.
        │
        ├── index.html           # Run it to see the app on the browser. 
        └── package.json


        >> Tip: Once something is reused across two or more features, promote it out to components/ or hooks/.


        >> Example of a Django folder project with Vue:
            /Web-Development/frontend/Vue/1-install-and-first-steps/project-folder-structure-vue-and-django.txt


    >> A Vue.js app file (.vue) divide itself by 3 layers:
        1) Script
        2) Template
        3) Style

        Important basic knowledge about each one:


        >> <SCRIPT> layer:
            
            >> There are 2-ways to code components, using 'Options API' or 'Component API' but both
                use JavaScript (TypeScript is optional) to be written:
                
                    /Web-Development/frontend/Vue/vue-knowledge/3-approaches-to-code.txt


        >> <TEMPLATE> layer:

            >> Templates is basically pure HTML, and each template can be fragmented in infinite
                other small pieces, using Vue Component structure associated with Vue Slots:

                    /Web-Development/frontend/Vue/vue-knowledge/5-components.txt
                    /Web-Development/frontend/Vue/vue-knowledge/5.4-slot.txt


        >> <STYLE> layer:

            >> Each component (.vue file, for example) can have its own <style> tag where all the
                style coded in there can be glogal (for the parent component and its child ones) or
                local so the style tag is restricted only to the component the style tag belongs.

                    <!-- if 'scoped', the style is only local for the current component -->
                    <style scoped>
                        ...
                    </style>



>> MORE ABOUT:
    /Web-Development/frontend/Vue/vue-knowledge/0-overview-deep-knowledge.txt


>> INSTALL A VUE PROJECT:
    /Web-Development/frontend/Vue/1-install-and-first-steps/_installation.txt